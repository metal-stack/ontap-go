// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VsiOnNas A VSI application using NAS.
//
// swagger:model vsi_on_nas
type VsiOnNas struct {

	// datastore
	// Required: true
	Datastore *VsiOnNasDatastore `json:"datastore" yaml:"datastore"`

	// hyper v access
	HypervAccess *VsiOnNasHypervAccess `json:"hyper_v_access,omitempty" yaml:"hyper_v_access,omitempty"`

	// The list of NFS access controls. You must provide either 'host' or 'access' to enable NFS access.
	NfsAccess []*AppNfsAccess `json:"nfs_access" yaml:"nfs_access"`

	// protection type
	ProtectionType *VsiOnNasProtectionType `json:"protection_type,omitempty" yaml:"protection_type,omitempty"`
}

// Validate validates this vsi on nas
func (m *VsiOnNas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsiOnNas) validateDatastore(formats strfmt.Registry) error {

	if err := validate.Required("datastore", "body", m.Datastore); err != nil {
		return err
	}

	if m.Datastore != nil {
		if err := m.Datastore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore")
			}
			return err
		}
	}

	return nil
}

func (m *VsiOnNas) validateHypervAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervAccess) { // not required
		return nil
	}

	if m.HypervAccess != nil {
		if err := m.HypervAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyper_v_access")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyper_v_access")
			}
			return err
		}
	}

	return nil
}

func (m *VsiOnNas) validateNfsAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsAccess) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsAccess); i++ {
		if swag.IsZero(m.NfsAccess[i]) { // not required
			continue
		}

		if m.NfsAccess[i] != nil {
			if err := m.NfsAccess[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VsiOnNas) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vsi on nas based on the context it is used
func (m *VsiOnNas) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsiOnNas) contextValidateDatastore(ctx context.Context, formats strfmt.Registry) error {

	if m.Datastore != nil {

		if err := m.Datastore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore")
			}
			return err
		}
	}

	return nil
}

func (m *VsiOnNas) contextValidateHypervAccess(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervAccess != nil {

		if swag.IsZero(m.HypervAccess) { // not required
			return nil
		}

		if err := m.HypervAccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyper_v_access")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyper_v_access")
			}
			return err
		}
	}

	return nil
}

func (m *VsiOnNas) contextValidateNfsAccess(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsAccess); i++ {

		if m.NfsAccess[i] != nil {

			if swag.IsZero(m.NfsAccess[i]) { // not required
				return nil
			}

			if err := m.NfsAccess[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VsiOnNas) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {

		if swag.IsZero(m.ProtectionType) { // not required
			return nil
		}

		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VsiOnNas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsiOnNas) UnmarshalBinary(b []byte) error {
	var res VsiOnNas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VsiOnNasDatastore vsi on nas datastore
//
// swagger:model VsiOnNasDatastore
type VsiOnNasDatastore struct {

	// The number of datastores to support.
	// Maximum: 16
	// Minimum: 1
	Count int64 `json:"count,omitempty" yaml:"count,omitempty"`

	// The size of the datastore. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size" yaml:"size"`

	// storage service
	StorageService *VsiOnNasDatastoreStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this vsi on nas datastore
func (m *VsiOnNasDatastore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsiOnNasDatastore) validateCount(formats strfmt.Registry) error {
	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("datastore"+"."+"count", "body", m.Count, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("datastore"+"."+"count", "body", m.Count, 16, false); err != nil {
		return err
	}

	return nil
}

func (m *VsiOnNasDatastore) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("datastore"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VsiOnNasDatastore) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vsi on nas datastore based on the context it is used
func (m *VsiOnNasDatastore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsiOnNasDatastore) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datastore" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datastore" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VsiOnNasDatastore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsiOnNasDatastore) UnmarshalBinary(b []byte) error {
	var res VsiOnNasDatastore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VsiOnNasDatastoreStorageService vsi on nas datastore storage service
//
// swagger:model VsiOnNasDatastoreStorageService
type VsiOnNasDatastoreStorageService struct {

	// The storage service of the datastore.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this vsi on nas datastore storage service
func (m *VsiOnNasDatastoreStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vsiOnNasDatastoreStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vsiOnNasDatastoreStorageServiceTypeNamePropEnum = append(vsiOnNasDatastoreStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// VsiOnNasDatastoreStorageServiceNameExtreme captures enum value "extreme"
	VsiOnNasDatastoreStorageServiceNameExtreme string = "extreme"

	// VsiOnNasDatastoreStorageServiceNamePerformance captures enum value "performance"
	VsiOnNasDatastoreStorageServiceNamePerformance string = "performance"

	// VsiOnNasDatastoreStorageServiceNameValue captures enum value "value"
	VsiOnNasDatastoreStorageServiceNameValue string = "value"
)

// prop value enum
func (m *VsiOnNasDatastoreStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vsiOnNasDatastoreStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VsiOnNasDatastoreStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("datastore"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vsi on nas datastore storage service based on context it is used
func (m *VsiOnNasDatastoreStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VsiOnNasDatastoreStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsiOnNasDatastoreStorageService) UnmarshalBinary(b []byte) error {
	var res VsiOnNasDatastoreStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VsiOnNasHypervAccess vsi on nas hyperv access
//
// swagger:model VsiOnNasHypervAccess
type VsiOnNasHypervAccess struct {

	// Hyper-V service account.
	// Max Length: 256
	// Min Length: 1
	ServiceAccount string `json:"service_account,omitempty" yaml:"service_account,omitempty"`
}

// Validate validates this vsi on nas hyperv access
func (m *VsiOnNasHypervAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsiOnNasHypervAccess) validateServiceAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceAccount) { // not required
		return nil
	}

	if err := validate.MinLength("hyper_v_access"+"."+"service_account", "body", m.ServiceAccount, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hyper_v_access"+"."+"service_account", "body", m.ServiceAccount, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vsi on nas hyperv access based on context it is used
func (m *VsiOnNasHypervAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VsiOnNasHypervAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsiOnNasHypervAccess) UnmarshalBinary(b []byte) error {
	var res VsiOnNasHypervAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VsiOnNasProtectionType vsi on nas protection type
//
// swagger:model VsiOnNasProtectionType
type VsiOnNasProtectionType struct {

	// The local RPO of the application.
	// Enum: ["hourly","none"]
	LocalRpo string `json:"local_rpo,omitempty" yaml:"local_rpo,omitempty"`

	// The remote RPO of the application.
	// Enum: ["none","zero"]
	RemoteRpo string `json:"remote_rpo,omitempty" yaml:"remote_rpo,omitempty"`
}

// Validate validates this vsi on nas protection type
func (m *VsiOnNasProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vsiOnNasProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vsiOnNasProtectionTypeTypeLocalRpoPropEnum = append(vsiOnNasProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// VsiOnNasProtectionTypeLocalRpoHourly captures enum value "hourly"
	VsiOnNasProtectionTypeLocalRpoHourly string = "hourly"

	// VsiOnNasProtectionTypeLocalRpoNone captures enum value "none"
	VsiOnNasProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *VsiOnNasProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vsiOnNasProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VsiOnNasProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var vsiOnNasProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vsiOnNasProtectionTypeTypeRemoteRpoPropEnum = append(vsiOnNasProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// VsiOnNasProtectionTypeRemoteRpoNone captures enum value "none"
	VsiOnNasProtectionTypeRemoteRpoNone string = "none"

	// VsiOnNasProtectionTypeRemoteRpoZero captures enum value "zero"
	VsiOnNasProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *VsiOnNasProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vsiOnNasProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VsiOnNasProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vsi on nas protection type based on context it is used
func (m *VsiOnNasProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VsiOnNasProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsiOnNasProtectionType) UnmarshalBinary(b []byte) error {
	var res VsiOnNasProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
