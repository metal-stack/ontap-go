// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZappNvmeComponentsSubsystem components.subsystem
//
// swagger:model zapp_nvme_components_subsystem
type ZappNvmeComponentsSubsystem struct {

	// hosts
	Hosts []*ZappNvmeComponentsSubsystemHostsItems0 `json:"hosts" yaml:"hosts"`

	// The name of the subsystem accessing the component. If neither the name nor the UUID is provided, the name defaults to &lt;application-name&gt;_&lt;component-name&gt;, whether that subsystem already exists or not.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// The name of the host OS accessing the component. The default value is the host OS that is running the application.
	// Enum: ["aix","linux","vmware","windows"]
	OsType string `json:"os_type,omitempty" yaml:"os_type,omitempty"`

	// The UUID of an existing subsystem to be granted access to the component.
	UUID string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
}

// Validate validates this zapp nvme components subsystem
func (m *ZappNvmeComponentsSubsystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystem) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var zappNvmeComponentsSubsystemTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aix","linux","vmware","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zappNvmeComponentsSubsystemTypeOsTypePropEnum = append(zappNvmeComponentsSubsystemTypeOsTypePropEnum, v)
	}
}

const (

	// ZappNvmeComponentsSubsystemOsTypeAix captures enum value "aix"
	ZappNvmeComponentsSubsystemOsTypeAix string = "aix"

	// ZappNvmeComponentsSubsystemOsTypeLinux captures enum value "linux"
	ZappNvmeComponentsSubsystemOsTypeLinux string = "linux"

	// ZappNvmeComponentsSubsystemOsTypeVmware captures enum value "vmware"
	ZappNvmeComponentsSubsystemOsTypeVmware string = "vmware"

	// ZappNvmeComponentsSubsystemOsTypeWindows captures enum value "windows"
	ZappNvmeComponentsSubsystemOsTypeWindows string = "windows"
)

// prop value enum
func (m *ZappNvmeComponentsSubsystem) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zappNvmeComponentsSubsystemTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystem) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("os_type", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this zapp nvme components subsystem based on the context it is used
func (m *ZappNvmeComponentsSubsystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystem) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {

			if swag.IsZero(m.Hosts[i]) { // not required
				return nil
			}

			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystem) UnmarshalBinary(b []byte) error {
	var res ZappNvmeComponentsSubsystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ZappNvmeComponentsSubsystemHostsItems0 zapp nvme components subsystem hosts items0
//
// swagger:model ZappNvmeComponentsSubsystemHostsItems0
type ZappNvmeComponentsSubsystemHostsItems0 struct {

	// dh hmac chap
	DhHmacChap *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap `json:"dh_hmac_chap,omitempty" yaml:"dh_hmac_chap,omitempty"`

	// The host NQN.
	Nqn string `json:"nqn,omitempty" yaml:"nqn,omitempty"`

	// Host Priority.
	// Enum: ["high","regular"]
	Priority string `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Validate validates this zapp nvme components subsystem hosts items0
func (m *ZappNvmeComponentsSubsystemHostsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhHmacChap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystemHostsItems0) validateDhHmacChap(formats strfmt.Registry) error {
	if swag.IsZero(m.DhHmacChap) { // not required
		return nil
	}

	if m.DhHmacChap != nil {
		if err := m.DhHmacChap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dh_hmac_chap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dh_hmac_chap")
			}
			return err
		}
	}

	return nil
}

var zappNvmeComponentsSubsystemHostsItems0TypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["high","regular"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zappNvmeComponentsSubsystemHostsItems0TypePriorityPropEnum = append(zappNvmeComponentsSubsystemHostsItems0TypePriorityPropEnum, v)
	}
}

const (

	// ZappNvmeComponentsSubsystemHostsItems0PriorityHigh captures enum value "high"
	ZappNvmeComponentsSubsystemHostsItems0PriorityHigh string = "high"

	// ZappNvmeComponentsSubsystemHostsItems0PriorityRegular captures enum value "regular"
	ZappNvmeComponentsSubsystemHostsItems0PriorityRegular string = "regular"
)

// prop value enum
func (m *ZappNvmeComponentsSubsystemHostsItems0) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zappNvmeComponentsSubsystemHostsItems0TypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystemHostsItems0) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this zapp nvme components subsystem hosts items0 based on the context it is used
func (m *ZappNvmeComponentsSubsystemHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhHmacChap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystemHostsItems0) contextValidateDhHmacChap(ctx context.Context, formats strfmt.Registry) error {

	if m.DhHmacChap != nil {

		if swag.IsZero(m.DhHmacChap) { // not required
			return nil
		}

		if err := m.DhHmacChap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dh_hmac_chap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dh_hmac_chap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystemHostsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystemHostsItems0) UnmarshalBinary(b []byte) error {
	var res ZappNvmeComponentsSubsystemHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ZappNvmeComponentsSubsystemHostsItems0DhHmacChap zapp nvme components subsystem hosts items0 dh hmac chap
//
// swagger:model ZappNvmeComponentsSubsystemHostsItems0DhHmacChap
type ZappNvmeComponentsSubsystemHostsItems0DhHmacChap struct {

	// Authentication Controller Secret.
	ControllerSecretKey string `json:"controller_secret_key,omitempty" yaml:"controller_secret_key,omitempty"`

	// Authentication Diffie-Hellman Group.
	// Enum: ["2048_bit","3072_bit","4096_bit","6144_bit","8192_bit","none"]
	GroupSize string `json:"group_size,omitempty" yaml:"group_size,omitempty"`

	// Authentication Hash Function.
	// Enum: ["sha_256","sha_512"]
	HashFunction string `json:"hash_function,omitempty" yaml:"hash_function,omitempty"`

	// Authentication Host Secret.
	HostSecretKey string `json:"host_secret_key,omitempty" yaml:"host_secret_key,omitempty"`
}

// Validate validates this zapp nvme components subsystem hosts items0 dh hmac chap
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashFunction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeGroupSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2048_bit","3072_bit","4096_bit","6144_bit","8192_bit","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeGroupSizePropEnum = append(zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeGroupSizePropEnum, v)
	}
}

const (

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr2048Bit captures enum value "2048_bit"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr2048Bit string = "2048_bit"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr3072Bit captures enum value "3072_bit"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr3072Bit string = "3072_bit"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr4096Bit captures enum value "4096_bit"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr4096Bit string = "4096_bit"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr6144Bit captures enum value "6144_bit"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr6144Bit string = "6144_bit"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr8192Bit captures enum value "8192_bit"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNr8192Bit string = "8192_bit"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNone captures enum value "none"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapGroupSizeNone string = "none"
)

// prop value enum
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) validateGroupSizeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeGroupSizePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) validateGroupSize(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupSizeEnum("dh_hmac_chap"+"."+"group_size", "body", m.GroupSize); err != nil {
		return err
	}

	return nil
}

var zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeHashFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha_256","sha_512"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeHashFunctionPropEnum = append(zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeHashFunctionPropEnum, v)
	}
}

const (

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapHashFunctionSha256 captures enum value "sha_256"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapHashFunctionSha256 string = "sha_256"

	// ZappNvmeComponentsSubsystemHostsItems0DhHmacChapHashFunctionSha512 captures enum value "sha_512"
	ZappNvmeComponentsSubsystemHostsItems0DhHmacChapHashFunctionSha512 string = "sha_512"
)

// prop value enum
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) validateHashFunctionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zappNvmeComponentsSubsystemHostsItems0DhHmacChapTypeHashFunctionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) validateHashFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.HashFunction) { // not required
		return nil
	}

	// value enum
	if err := m.validateHashFunctionEnum("dh_hmac_chap"+"."+"hash_function", "body", m.HashFunction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this zapp nvme components subsystem hosts items0 dh hmac chap based on context it is used
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZappNvmeComponentsSubsystemHostsItems0DhHmacChap) UnmarshalBinary(b []byte) error {
	var res ZappNvmeComponentsSubsystemHostsItems0DhHmacChap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
