// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleRacOnNfs Oracle RAC using NFS.
//
// swagger:model oracle_rac_on_nfs
type OracleRacOnNfs struct {

	// archive log
	ArchiveLog *OracleRacOnNfsArchiveLog `json:"archive_log,omitempty" yaml:"archive_log,omitempty"`

	// db
	// Required: true
	Db *OracleRacOnNfsDb `json:"db" yaml:"db"`

	// grid binary
	GridBinary *OracleRacOnNfsGridBinary `json:"grid_binary,omitempty" yaml:"grid_binary,omitempty"`

	// The list of NFS access controls. You must provide either 'host' or 'access' to enable NFS access.
	NfsAccess []*AppNfsAccess `json:"nfs_access" yaml:"nfs_access"`

	// ora home
	OraHome *OracleRacOnNfsOraHome `json:"ora_home,omitempty" yaml:"ora_home,omitempty"`

	// oracle crs
	OracleCrs *OracleRacOnNfsOracleCrs `json:"oracle_crs,omitempty" yaml:"oracle_crs,omitempty"`

	// protection type
	ProtectionType *OracleRacOnNfsProtectionType `json:"protection_type,omitempty" yaml:"protection_type,omitempty"`

	// redo log
	// Required: true
	RedoLog *OracleRacOnNfsRedoLog `json:"redo_log" yaml:"redo_log"`
}

// Validate validates this oracle rac on nfs
func (m *OracleRacOnNfs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGridBinary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOraHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleCrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedoLog(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfs) validateArchiveLog(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveLog) { // not required
		return nil
	}

	if m.ArchiveLog != nil {
		if err := m.ArchiveLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateDb(formats strfmt.Registry) error {

	if err := validate.Required("db", "body", m.Db); err != nil {
		return err
	}

	if m.Db != nil {
		if err := m.Db.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateGridBinary(formats strfmt.Registry) error {
	if swag.IsZero(m.GridBinary) { // not required
		return nil
	}

	if m.GridBinary != nil {
		if err := m.GridBinary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_binary")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateNfsAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsAccess) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsAccess); i++ {
		if swag.IsZero(m.NfsAccess[i]) { // not required
			continue
		}

		if m.NfsAccess[i] != nil {
			if err := m.NfsAccess[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnNfs) validateOraHome(formats strfmt.Registry) error {
	if swag.IsZero(m.OraHome) { // not required
		return nil
	}

	if m.OraHome != nil {
		if err := m.OraHome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateOracleCrs(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleCrs) { // not required
		return nil
	}

	if m.OracleCrs != nil {
		if err := m.OracleCrs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle_crs")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) validateRedoLog(formats strfmt.Registry) error {

	if err := validate.Required("redo_log", "body", m.RedoLog); err != nil {
		return err
	}

	if m.RedoLog != nil {
		if err := m.RedoLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs based on the context it is used
func (m *OracleRacOnNfs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGridBinary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOraHome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleCrs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedoLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfs) contextValidateArchiveLog(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveLog != nil {

		if swag.IsZero(m.ArchiveLog) { // not required
			return nil
		}

		if err := m.ArchiveLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archive_log")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateDb(ctx context.Context, formats strfmt.Registry) error {

	if m.Db != nil {

		if err := m.Db.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("db")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateGridBinary(ctx context.Context, formats strfmt.Registry) error {

	if m.GridBinary != nil {

		if swag.IsZero(m.GridBinary) { // not required
			return nil
		}

		if err := m.GridBinary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_binary")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateNfsAccess(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsAccess); i++ {

		if m.NfsAccess[i] != nil {

			if swag.IsZero(m.NfsAccess[i]) { // not required
				return nil
			}

			if err := m.NfsAccess[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_access" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateOraHome(ctx context.Context, formats strfmt.Registry) error {

	if m.OraHome != nil {

		if swag.IsZero(m.OraHome) { // not required
			return nil
		}

		if err := m.OraHome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ora_home")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateOracleCrs(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleCrs != nil {

		if swag.IsZero(m.OracleCrs) { // not required
			return nil
		}

		if err := m.OracleCrs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle_crs")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {

		if swag.IsZero(m.ProtectionType) { // not required
			return nil
		}

		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

func (m *OracleRacOnNfs) contextValidateRedoLog(ctx context.Context, formats strfmt.Registry) error {

	if m.RedoLog != nil {

		if err := m.RedoLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redo_log")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfs) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsArchiveLog oracle rac on nfs archive log
//
// swagger:model OracleRacOnNfsArchiveLog
type OracleRacOnNfsArchiveLog struct {

	// The size of the archive log. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty" yaml:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnNfsArchiveLogStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs archive log
func (m *OracleRacOnNfsArchiveLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsArchiveLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs archive log based on the context it is used
func (m *OracleRacOnNfsArchiveLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsArchiveLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archive_log" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archive_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsArchiveLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsArchiveLog) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsArchiveLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsArchiveLogStorageService oracle rac on nfs archive log storage service
//
// swagger:model OracleRacOnNfsArchiveLogStorageService
type OracleRacOnNfsArchiveLogStorageService struct {

	// The storage service of the archive log.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs archive log storage service
func (m *OracleRacOnNfsArchiveLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsArchiveLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsArchiveLogStorageServiceTypeNamePropEnum = append(oracleRacOnNfsArchiveLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsArchiveLogStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsArchiveLogStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsArchiveLogStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsArchiveLogStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsArchiveLogStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsArchiveLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsArchiveLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsArchiveLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsArchiveLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("archive_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs archive log storage service based on context it is used
func (m *OracleRacOnNfsArchiveLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsArchiveLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsArchiveLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsArchiveLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsDb oracle rac on nfs db
//
// swagger:model OracleRacOnNfsDb
type OracleRacOnNfsDb struct {

	// The size of the database. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size" yaml:"size"`

	// storage service
	StorageService *OracleRacOnNfsDbStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs db
func (m *OracleRacOnNfsDb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsDb) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("db"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnNfsDb) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs db based on the context it is used
func (m *OracleRacOnNfsDb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsDb) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("db" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsDb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsDb) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsDb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsDbStorageService oracle rac on nfs db storage service
//
// swagger:model OracleRacOnNfsDbStorageService
type OracleRacOnNfsDbStorageService struct {

	// The storage service of the database.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs db storage service
func (m *OracleRacOnNfsDbStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsDbStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsDbStorageServiceTypeNamePropEnum = append(oracleRacOnNfsDbStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsDbStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsDbStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsDbStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsDbStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsDbStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsDbStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsDbStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsDbStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsDbStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("db"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs db storage service based on context it is used
func (m *OracleRacOnNfsDbStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsDbStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsDbStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsDbStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsGridBinary oracle rac on nfs grid binary
//
// swagger:model OracleRacOnNfsGridBinary
type OracleRacOnNfsGridBinary struct {

	// The size of the Oracle grid binary storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty" yaml:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnNfsGridBinaryStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs grid binary
func (m *OracleRacOnNfsGridBinary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsGridBinary) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_binary" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs grid binary based on the context it is used
func (m *OracleRacOnNfsGridBinary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsGridBinary) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_binary" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_binary" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsGridBinary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsGridBinary) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsGridBinary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsGridBinaryStorageService oracle rac on nfs grid binary storage service
//
// swagger:model OracleRacOnNfsGridBinaryStorageService
type OracleRacOnNfsGridBinaryStorageService struct {

	// The storage service of the Oracle grid binary storage volume.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs grid binary storage service
func (m *OracleRacOnNfsGridBinaryStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsGridBinaryStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsGridBinaryStorageServiceTypeNamePropEnum = append(oracleRacOnNfsGridBinaryStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsGridBinaryStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsGridBinaryStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsGridBinaryStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsGridBinaryStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsGridBinaryStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsGridBinaryStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsGridBinaryStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsGridBinaryStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsGridBinaryStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("grid_binary"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs grid binary storage service based on context it is used
func (m *OracleRacOnNfsGridBinaryStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsGridBinaryStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsGridBinaryStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsGridBinaryStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsOraHome oracle rac on nfs ora home
//
// swagger:model OracleRacOnNfsOraHome
type OracleRacOnNfsOraHome struct {

	// The size of the ORACLE_HOME storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty" yaml:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnNfsOraHomeStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs ora home
func (m *OracleRacOnNfsOraHome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsOraHome) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs ora home based on the context it is used
func (m *OracleRacOnNfsOraHome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsOraHome) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ora_home" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ora_home" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsOraHome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsOraHome) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsOraHome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsOraHomeStorageService oracle rac on nfs ora home storage service
//
// swagger:model OracleRacOnNfsOraHomeStorageService
type OracleRacOnNfsOraHomeStorageService struct {

	// The storage service of the ORACLE_HOME storage volume.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs ora home storage service
func (m *OracleRacOnNfsOraHomeStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsOraHomeStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsOraHomeStorageServiceTypeNamePropEnum = append(oracleRacOnNfsOraHomeStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsOraHomeStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsOraHomeStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsOraHomeStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsOraHomeStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsOraHomeStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsOraHomeStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsOraHomeStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsOraHomeStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsOraHomeStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("ora_home"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs ora home storage service based on context it is used
func (m *OracleRacOnNfsOraHomeStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsOraHomeStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsOraHomeStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsOraHomeStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsOracleCrs oracle rac on nfs oracle crs
//
// swagger:model OracleRacOnNfsOracleCrs
type OracleRacOnNfsOracleCrs struct {

	// The number of CRS volumes.
	// Maximum: 10
	// Minimum: 1
	Copies int64 `json:"copies,omitempty" yaml:"copies,omitempty"`

	// The size of the Oracle CRS/voting storage volume. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	Size int64 `json:"size,omitempty" yaml:"size,omitempty"`

	// storage service
	StorageService *OracleRacOnNfsOracleCrsStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs oracle crs
func (m *OracleRacOnNfsOracleCrs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsOracleCrs) validateCopies(formats strfmt.Registry) error {
	if swag.IsZero(m.Copies) { // not required
		return nil
	}

	if err := validate.MinimumInt("oracle_crs"+"."+"copies", "body", m.Copies, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("oracle_crs"+"."+"copies", "body", m.Copies, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnNfsOracleCrs) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle_crs" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs oracle crs based on the context it is used
func (m *OracleRacOnNfsOracleCrs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsOracleCrs) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle_crs" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracle_crs" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsOracleCrs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsOracleCrs) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsOracleCrs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsOracleCrsStorageService oracle rac on nfs oracle crs storage service
//
// swagger:model OracleRacOnNfsOracleCrsStorageService
type OracleRacOnNfsOracleCrsStorageService struct {

	// The storage service of the Oracle CRS volume.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs oracle crs storage service
func (m *OracleRacOnNfsOracleCrsStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsOracleCrsStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsOracleCrsStorageServiceTypeNamePropEnum = append(oracleRacOnNfsOracleCrsStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsOracleCrsStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsOracleCrsStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsOracleCrsStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsOracleCrsStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsOracleCrsStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsOracleCrsStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsOracleCrsStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsOracleCrsStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsOracleCrsStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("oracle_crs"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs oracle crs storage service based on context it is used
func (m *OracleRacOnNfsOracleCrsStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsOracleCrsStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsOracleCrsStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsOracleCrsStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsProtectionType oracle rac on nfs protection type
//
// swagger:model OracleRacOnNfsProtectionType
type OracleRacOnNfsProtectionType struct {

	// The local RPO of the application.
	// Enum: ["hourly","none"]
	LocalRpo string `json:"local_rpo,omitempty" yaml:"local_rpo,omitempty"`

	// The remote RPO of the application.
	// Enum: ["none","zero"]
	RemoteRpo string `json:"remote_rpo,omitempty" yaml:"remote_rpo,omitempty"`
}

// Validate validates this oracle rac on nfs protection type
func (m *OracleRacOnNfsProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsProtectionTypeTypeLocalRpoPropEnum = append(oracleRacOnNfsProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// OracleRacOnNfsProtectionTypeLocalRpoHourly captures enum value "hourly"
	OracleRacOnNfsProtectionTypeLocalRpoHourly string = "hourly"

	// OracleRacOnNfsProtectionTypeLocalRpoNone captures enum value "none"
	OracleRacOnNfsProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *OracleRacOnNfsProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var oracleRacOnNfsProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsProtectionTypeTypeRemoteRpoPropEnum = append(oracleRacOnNfsProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// OracleRacOnNfsProtectionTypeRemoteRpoNone captures enum value "none"
	OracleRacOnNfsProtectionTypeRemoteRpoNone string = "none"

	// OracleRacOnNfsProtectionTypeRemoteRpoZero captures enum value "zero"
	OracleRacOnNfsProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *OracleRacOnNfsProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs protection type based on context it is used
func (m *OracleRacOnNfsProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsProtectionType) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsRedoLog oracle rac on nfs redo log
//
// swagger:model OracleRacOnNfsRedoLog
type OracleRacOnNfsRedoLog struct {

	// Specifies whether the redo log group should be mirrored.
	// Enum: [false,true]
	Mirrored *bool `json:"mirrored,omitempty" yaml:"mirrored,omitempty"`

	// The size of the redo log group. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size" yaml:"size"`

	// storage service
	StorageService *OracleRacOnNfsRedoLogStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this oracle rac on nfs redo log
func (m *OracleRacOnNfsRedoLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMirrored(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsRedoLogTypeMirroredPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsRedoLogTypeMirroredPropEnum = append(oracleRacOnNfsRedoLogTypeMirroredPropEnum, v)
	}
}

// prop value enum
func (m *OracleRacOnNfsRedoLog) validateMirroredEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsRedoLogTypeMirroredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsRedoLog) validateMirrored(formats strfmt.Registry) error {
	if swag.IsZero(m.Mirrored) { // not required
		return nil
	}

	// value enum
	if err := m.validateMirroredEnum("redo_log"+"."+"mirrored", "body", *m.Mirrored); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnNfsRedoLog) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("redo_log"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *OracleRacOnNfsRedoLog) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle rac on nfs redo log based on the context it is used
func (m *OracleRacOnNfsRedoLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRacOnNfsRedoLog) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redo_log" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redo_log" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsRedoLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsRedoLog) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsRedoLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OracleRacOnNfsRedoLogStorageService oracle rac on nfs redo log storage service
//
// swagger:model OracleRacOnNfsRedoLogStorageService
type OracleRacOnNfsRedoLogStorageService struct {

	// The storage service of the redo log group.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this oracle rac on nfs redo log storage service
func (m *OracleRacOnNfsRedoLogStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRacOnNfsRedoLogStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRacOnNfsRedoLogStorageServiceTypeNamePropEnum = append(oracleRacOnNfsRedoLogStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// OracleRacOnNfsRedoLogStorageServiceNameExtreme captures enum value "extreme"
	OracleRacOnNfsRedoLogStorageServiceNameExtreme string = "extreme"

	// OracleRacOnNfsRedoLogStorageServiceNamePerformance captures enum value "performance"
	OracleRacOnNfsRedoLogStorageServiceNamePerformance string = "performance"

	// OracleRacOnNfsRedoLogStorageServiceNameValue captures enum value "value"
	OracleRacOnNfsRedoLogStorageServiceNameValue string = "value"
)

// prop value enum
func (m *OracleRacOnNfsRedoLogStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRacOnNfsRedoLogStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRacOnNfsRedoLogStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("redo_log"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rac on nfs redo log storage service based on context it is used
func (m *OracleRacOnNfsRedoLogStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRacOnNfsRedoLogStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRacOnNfsRedoLogStorageService) UnmarshalBinary(b []byte) error {
	var res OracleRacOnNfsRedoLogStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
