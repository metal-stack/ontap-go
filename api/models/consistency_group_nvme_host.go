// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConsistencyGroupNvmeHost The NVMe host provisioned to access NVMe namespaces mapped to a subsystem.
//
// swagger:model consistency_group_nvme_host
type ConsistencyGroupNvmeHost struct {

	// dh hmac chap
	DhHmacChap *ConsistencyGroupNvmeHostDhHmacChap `json:"dh_hmac_chap,omitempty" yaml:"dh_hmac_chap,omitempty"`

	// The NVMe qualified name (NQN) used to identify the NVMe storage target. Not allowed in POST when the `records` property is used.
	//
	// Example: nqn.1992-01.example.com:string
	Nqn *string `json:"nqn,omitempty" yaml:"nqn,omitempty"`

	// The host priority setting allocates appropriate NVMe I/O queues (count and depth) for the host to submit I/O commands. Absence of this property in GET implies io_queue count and I/O queue depth are being used.
	//
	// Enum: ["regular","high"]
	Priority *string `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Validate validates this consistency group nvme host
func (m *ConsistencyGroupNvmeHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhHmacChap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupNvmeHost) validateDhHmacChap(formats strfmt.Registry) error {
	if swag.IsZero(m.DhHmacChap) { // not required
		return nil
	}

	if m.DhHmacChap != nil {
		if err := m.DhHmacChap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dh_hmac_chap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dh_hmac_chap")
			}
			return err
		}
	}

	return nil
}

var consistencyGroupNvmeHostTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["regular","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consistencyGroupNvmeHostTypePriorityPropEnum = append(consistencyGroupNvmeHostTypePriorityPropEnum, v)
	}
}

const (

	// ConsistencyGroupNvmeHostPriorityRegular captures enum value "regular"
	ConsistencyGroupNvmeHostPriorityRegular string = "regular"

	// ConsistencyGroupNvmeHostPriorityHigh captures enum value "high"
	ConsistencyGroupNvmeHostPriorityHigh string = "high"
)

// prop value enum
func (m *ConsistencyGroupNvmeHost) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, consistencyGroupNvmeHostTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConsistencyGroupNvmeHost) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this consistency group nvme host based on the context it is used
func (m *ConsistencyGroupNvmeHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhHmacChap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsistencyGroupNvmeHost) contextValidateDhHmacChap(ctx context.Context, formats strfmt.Registry) error {

	if m.DhHmacChap != nil {

		if swag.IsZero(m.DhHmacChap) { // not required
			return nil
		}

		if err := m.DhHmacChap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dh_hmac_chap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dh_hmac_chap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsistencyGroupNvmeHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsistencyGroupNvmeHost) UnmarshalBinary(b []byte) error {
	var res ConsistencyGroupNvmeHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
