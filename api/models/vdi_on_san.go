// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VdiOnSan A VDI application using SAN.
//
// swagger:model vdi_on_san
type VdiOnSan struct {

	// desktops
	// Required: true
	Desktops *VdiOnSanDesktops `json:"desktops" yaml:"desktops"`

	// The name of the hypervisor hosting the application.
	// Required: true
	// Enum: ["hyper_v","vmware","xen"]
	Hypervisor *string `json:"hypervisor" yaml:"hypervisor"`

	// The name of the initiator group through which the contents of this application will be accessed. Modification of this parameter is a disruptive operation. All LUNs in the application component will be unmapped from the current igroup and re-mapped to the new igroup.
	// Required: true
	// Max Length: 96
	// Min Length: 1
	IgroupName *string `json:"igroup_name" yaml:"igroup_name"`

	// The list of initiator groups to create.
	// Max Items: 1
	// Min Items: 0
	NewIgroups []*VdiOnSanNewIgroups `json:"new_igroups" yaml:"new_igroups"`

	// protection type
	ProtectionType *VdiOnSanProtectionType `json:"protection_type,omitempty" yaml:"protection_type,omitempty"`
}

// Validate validates this vdi on san
func (m *VdiOnSan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesktops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewIgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdiOnSan) validateDesktops(formats strfmt.Registry) error {

	if err := validate.Required("desktops", "body", m.Desktops); err != nil {
		return err
	}

	if m.Desktops != nil {
		if err := m.Desktops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desktops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("desktops")
			}
			return err
		}
	}

	return nil
}

var vdiOnSanTypeHypervisorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hyper_v","vmware","xen"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vdiOnSanTypeHypervisorPropEnum = append(vdiOnSanTypeHypervisorPropEnum, v)
	}
}

const (

	// VdiOnSanHypervisorHyperv captures enum value "hyper_v"
	VdiOnSanHypervisorHyperv string = "hyper_v"

	// VdiOnSanHypervisorVmware captures enum value "vmware"
	VdiOnSanHypervisorVmware string = "vmware"

	// VdiOnSanHypervisorXen captures enum value "xen"
	VdiOnSanHypervisorXen string = "xen"
)

// prop value enum
func (m *VdiOnSan) validateHypervisorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vdiOnSanTypeHypervisorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VdiOnSan) validateHypervisor(formats strfmt.Registry) error {

	if err := validate.Required("hypervisor", "body", m.Hypervisor); err != nil {
		return err
	}

	// value enum
	if err := m.validateHypervisorEnum("hypervisor", "body", *m.Hypervisor); err != nil {
		return err
	}

	return nil
}

func (m *VdiOnSan) validateIgroupName(formats strfmt.Registry) error {

	if err := validate.Required("igroup_name", "body", m.IgroupName); err != nil {
		return err
	}

	if err := validate.MinLength("igroup_name", "body", *m.IgroupName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("igroup_name", "body", *m.IgroupName, 96); err != nil {
		return err
	}

	return nil
}

func (m *VdiOnSan) validateNewIgroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NewIgroups) { // not required
		return nil
	}

	iNewIgroupsSize := int64(len(m.NewIgroups))

	if err := validate.MinItems("new_igroups", "body", iNewIgroupsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("new_igroups", "body", iNewIgroupsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.NewIgroups); i++ {
		if swag.IsZero(m.NewIgroups[i]) { // not required
			continue
		}

		if m.NewIgroups[i] != nil {
			if err := m.NewIgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VdiOnSan) validateProtectionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionType) { // not required
		return nil
	}

	if m.ProtectionType != nil {
		if err := m.ProtectionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vdi on san based on the context it is used
func (m *VdiOnSan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDesktops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewIgroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdiOnSan) contextValidateDesktops(ctx context.Context, formats strfmt.Registry) error {

	if m.Desktops != nil {

		if err := m.Desktops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desktops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("desktops")
			}
			return err
		}
	}

	return nil
}

func (m *VdiOnSan) contextValidateNewIgroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewIgroups); i++ {

		if m.NewIgroups[i] != nil {

			if swag.IsZero(m.NewIgroups[i]) { // not required
				return nil
			}

			if err := m.NewIgroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new_igroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VdiOnSan) contextValidateProtectionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectionType != nil {

		if swag.IsZero(m.ProtectionType) { // not required
			return nil
		}

		if err := m.ProtectionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protection_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protection_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VdiOnSan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdiOnSan) UnmarshalBinary(b []byte) error {
	var res VdiOnSan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VdiOnSanDesktops vdi on san desktops
//
// swagger:model VdiOnSanDesktops
type VdiOnSanDesktops struct {

	// The number of desktops to support.
	// Maximum: 8000
	// Minimum: 1
	Count int64 `json:"count,omitempty" yaml:"count,omitempty"`

	// The size of the desktops. Usage: {&lt;integer&gt;[KB|MB|GB|TB|PB]}
	// Required: true
	Size *int64 `json:"size" yaml:"size"`

	// storage service
	StorageService *VdiOnSanDesktopsStorageService `json:"storage_service,omitempty" yaml:"storage_service,omitempty"`
}

// Validate validates this vdi on san desktops
func (m *VdiOnSanDesktops) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdiOnSanDesktops) validateCount(formats strfmt.Registry) error {
	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("desktops"+"."+"count", "body", m.Count, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("desktops"+"."+"count", "body", m.Count, 8000, false); err != nil {
		return err
	}

	return nil
}

func (m *VdiOnSanDesktops) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("desktops"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VdiOnSanDesktops) validateStorageService(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageService) { // not required
		return nil
	}

	if m.StorageService != nil {
		if err := m.StorageService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desktops" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("desktops" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vdi on san desktops based on the context it is used
func (m *VdiOnSanDesktops) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VdiOnSanDesktops) contextValidateStorageService(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageService != nil {

		if swag.IsZero(m.StorageService) { // not required
			return nil
		}

		if err := m.StorageService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desktops" + "." + "storage_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("desktops" + "." + "storage_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VdiOnSanDesktops) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdiOnSanDesktops) UnmarshalBinary(b []byte) error {
	var res VdiOnSanDesktops
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VdiOnSanDesktopsStorageService vdi on san desktops storage service
//
// swagger:model VdiOnSanDesktopsStorageService
type VdiOnSanDesktopsStorageService struct {

	// The storage service of the desktops.
	// Enum: ["extreme","performance","value"]
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this vdi on san desktops storage service
func (m *VdiOnSanDesktopsStorageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vdiOnSanDesktopsStorageServiceTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["extreme","performance","value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vdiOnSanDesktopsStorageServiceTypeNamePropEnum = append(vdiOnSanDesktopsStorageServiceTypeNamePropEnum, v)
	}
}

const (

	// VdiOnSanDesktopsStorageServiceNameExtreme captures enum value "extreme"
	VdiOnSanDesktopsStorageServiceNameExtreme string = "extreme"

	// VdiOnSanDesktopsStorageServiceNamePerformance captures enum value "performance"
	VdiOnSanDesktopsStorageServiceNamePerformance string = "performance"

	// VdiOnSanDesktopsStorageServiceNameValue captures enum value "value"
	VdiOnSanDesktopsStorageServiceNameValue string = "value"
)

// prop value enum
func (m *VdiOnSanDesktopsStorageService) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vdiOnSanDesktopsStorageServiceTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VdiOnSanDesktopsStorageService) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("desktops"+"."+"storage_service"+"."+"name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vdi on san desktops storage service based on context it is used
func (m *VdiOnSanDesktopsStorageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VdiOnSanDesktopsStorageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdiOnSanDesktopsStorageService) UnmarshalBinary(b []byte) error {
	var res VdiOnSanDesktopsStorageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VdiOnSanProtectionType vdi on san protection type
//
// swagger:model VdiOnSanProtectionType
type VdiOnSanProtectionType struct {

	// The local RPO of the application.
	// Enum: ["hourly","none"]
	LocalRpo string `json:"local_rpo,omitempty" yaml:"local_rpo,omitempty"`

	// The remote RPO of the application.
	// Enum: ["none","zero"]
	RemoteRpo string `json:"remote_rpo,omitempty" yaml:"remote_rpo,omitempty"`
}

// Validate validates this vdi on san protection type
func (m *VdiOnSanProtectionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalRpo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteRpo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vdiOnSanProtectionTypeTypeLocalRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vdiOnSanProtectionTypeTypeLocalRpoPropEnum = append(vdiOnSanProtectionTypeTypeLocalRpoPropEnum, v)
	}
}

const (

	// VdiOnSanProtectionTypeLocalRpoHourly captures enum value "hourly"
	VdiOnSanProtectionTypeLocalRpoHourly string = "hourly"

	// VdiOnSanProtectionTypeLocalRpoNone captures enum value "none"
	VdiOnSanProtectionTypeLocalRpoNone string = "none"
)

// prop value enum
func (m *VdiOnSanProtectionType) validateLocalRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vdiOnSanProtectionTypeTypeLocalRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VdiOnSanProtectionType) validateLocalRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalRpoEnum("protection_type"+"."+"local_rpo", "body", m.LocalRpo); err != nil {
		return err
	}

	return nil
}

var vdiOnSanProtectionTypeTypeRemoteRpoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","zero"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vdiOnSanProtectionTypeTypeRemoteRpoPropEnum = append(vdiOnSanProtectionTypeTypeRemoteRpoPropEnum, v)
	}
}

const (

	// VdiOnSanProtectionTypeRemoteRpoNone captures enum value "none"
	VdiOnSanProtectionTypeRemoteRpoNone string = "none"

	// VdiOnSanProtectionTypeRemoteRpoZero captures enum value "zero"
	VdiOnSanProtectionTypeRemoteRpoZero string = "zero"
)

// prop value enum
func (m *VdiOnSanProtectionType) validateRemoteRpoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vdiOnSanProtectionTypeTypeRemoteRpoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VdiOnSanProtectionType) validateRemoteRpo(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteRpo) { // not required
		return nil
	}

	// value enum
	if err := m.validateRemoteRpoEnum("protection_type"+"."+"remote_rpo", "body", m.RemoteRpo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vdi on san protection type based on context it is used
func (m *VdiOnSanProtectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VdiOnSanProtectionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VdiOnSanProtectionType) UnmarshalBinary(b []byte) error {
	var res VdiOnSanProtectionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
