// Code generated by mockery v2.51.0. DO NOT EDIT.

package s_a_n

import (
	clients_a_n "github.com/metal-stack/ontap-go/api/client/s_a_n"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// FcLoginCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcLoginCollectionGet(params *clients_a_n.FcLoginCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcLoginCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcLoginCollectionGet")
	}

	var r0 *clients_a_n.FcLoginCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcLoginCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcLoginCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcLoginCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcLoginCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcLoginCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcLoginCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcLoginGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcLoginGet(params *clients_a_n.FcLoginGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcLoginGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcLoginGet")
	}

	var r0 *clients_a_n.FcLoginGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcLoginGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcLoginGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcLoginGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcLoginGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcLoginGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcLoginGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcpServiceCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcpServiceCollectionGet(params *clients_a_n.FcpServiceCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcpServiceCollectionGet")
	}

	var r0 *clients_a_n.FcpServiceCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcpServiceCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcpServiceCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcpServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcpServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcpServiceCreate(params *clients_a_n.FcpServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcpServiceCreate")
	}

	var r0 *clients_a_n.FcpServiceCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcpServiceCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcpServiceCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcpServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcpServiceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcpServiceDelete(params *clients_a_n.FcpServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcpServiceDelete")
	}

	var r0 *clients_a_n.FcpServiceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcpServiceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcpServiceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcpServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcpServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcpServiceGet(params *clients_a_n.FcpServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcpServiceGet")
	}

	var r0 *clients_a_n.FcpServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcpServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcpServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcpServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FcpServiceModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) FcpServiceModify(params *clients_a_n.FcpServiceModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FcpServiceModify")
	}

	var r0 *clients_a_n.FcpServiceModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.FcpServiceModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.FcpServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.FcpServiceModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.FcpServiceModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.FcpServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupCollectionGet(params *clients_a_n.IgroupCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupCollectionGet")
	}

	var r0 *clients_a_n.IgroupCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupCreate(params *clients_a_n.IgroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupCreate")
	}

	var r0 *clients_a_n.IgroupCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupDelete(params *clients_a_n.IgroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupDelete")
	}

	var r0 *clients_a_n.IgroupDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupGet(params *clients_a_n.IgroupGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupGet")
	}

	var r0 *clients_a_n.IgroupGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupInitiatorCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupInitiatorCollectionGet(params *clients_a_n.IgroupInitiatorCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupInitiatorCollectionGet")
	}

	var r0 *clients_a_n.IgroupInitiatorCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupInitiatorCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupInitiatorCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupInitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupInitiatorCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupInitiatorCreate(params *clients_a_n.IgroupInitiatorCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupInitiatorCreate")
	}

	var r0 *clients_a_n.IgroupInitiatorCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupInitiatorCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupInitiatorCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupInitiatorCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupInitiatorDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupInitiatorDelete(params *clients_a_n.IgroupInitiatorDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupInitiatorDelete")
	}

	var r0 *clients_a_n.IgroupInitiatorDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupInitiatorDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupInitiatorDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupInitiatorDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupInitiatorGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupInitiatorGet(params *clients_a_n.IgroupInitiatorGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupInitiatorGet")
	}

	var r0 *clients_a_n.IgroupInitiatorGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupInitiatorGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupInitiatorGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupInitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupInitiatorModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupInitiatorModify(params *clients_a_n.IgroupInitiatorModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupInitiatorModify")
	}

	var r0 *clients_a_n.IgroupInitiatorModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupInitiatorModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupInitiatorModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupInitiatorModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupInitiatorModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupInitiatorModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupModify(params *clients_a_n.IgroupModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupModify")
	}

	var r0 *clients_a_n.IgroupModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupNestedCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupNestedCollectionGet(params *clients_a_n.IgroupNestedCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupNestedCollectionGet")
	}

	var r0 *clients_a_n.IgroupNestedCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupNestedCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupNestedCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupNestedCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupNestedCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupNestedCreate(params *clients_a_n.IgroupNestedCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupNestedCreate")
	}

	var r0 *clients_a_n.IgroupNestedCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupNestedCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupNestedCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupNestedCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupNestedDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupNestedDelete(params *clients_a_n.IgroupNestedDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupNestedDelete")
	}

	var r0 *clients_a_n.IgroupNestedDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupNestedDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupNestedDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupNestedDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgroupNestedGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IgroupNestedGet(params *clients_a_n.IgroupNestedGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IgroupNestedGet")
	}

	var r0 *clients_a_n.IgroupNestedGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IgroupNestedGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IgroupNestedGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IgroupNestedGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IgroupNestedGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IgroupNestedGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiatorCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) InitiatorCollectionGet(params *clients_a_n.InitiatorCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.InitiatorCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitiatorCollectionGet")
	}

	var r0 *clients_a_n.InitiatorCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.InitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.InitiatorCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.InitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.InitiatorCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.InitiatorCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.InitiatorCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiatorGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) InitiatorGet(params *clients_a_n.InitiatorGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.InitiatorGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitiatorGet")
	}

	var r0 *clients_a_n.InitiatorGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.InitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.InitiatorGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.InitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.InitiatorGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.InitiatorGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.InitiatorGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiCredentialsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiCredentialsCollectionGet(params *clients_a_n.IscsiCredentialsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiCredentialsCollectionGet")
	}

	var r0 *clients_a_n.IscsiCredentialsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiCredentialsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiCredentialsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiCredentialsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiCredentialsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiCredentialsCreate(params *clients_a_n.IscsiCredentialsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiCredentialsCreate")
	}

	var r0 *clients_a_n.IscsiCredentialsCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiCredentialsCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiCredentialsCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiCredentialsCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiCredentialsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiCredentialsDelete(params *clients_a_n.IscsiCredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiCredentialsDelete")
	}

	var r0 *clients_a_n.IscsiCredentialsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiCredentialsDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiCredentialsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiCredentialsDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiCredentialsGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiCredentialsGet(params *clients_a_n.IscsiCredentialsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiCredentialsGet")
	}

	var r0 *clients_a_n.IscsiCredentialsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiCredentialsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiCredentialsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiCredentialsGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiCredentialsModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiCredentialsModify(params *clients_a_n.IscsiCredentialsModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiCredentialsModify")
	}

	var r0 *clients_a_n.IscsiCredentialsModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiCredentialsModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiCredentialsModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiCredentialsModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiCredentialsModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiCredentialsModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiServiceCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiServiceCollectionGet(params *clients_a_n.IscsiServiceCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiServiceCollectionGet")
	}

	var r0 *clients_a_n.IscsiServiceCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiServiceCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiServiceCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiServiceCreate(params *clients_a_n.IscsiServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiServiceCreate")
	}

	var r0 *clients_a_n.IscsiServiceCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiServiceCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiServiceCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiServiceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiServiceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiServiceDelete(params *clients_a_n.IscsiServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiServiceDelete")
	}

	var r0 *clients_a_n.IscsiServiceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiServiceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiServiceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiServiceGet(params *clients_a_n.IscsiServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiServiceGet")
	}

	var r0 *clients_a_n.IscsiServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiServiceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiServiceModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiServiceModify(params *clients_a_n.IscsiServiceModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiServiceModify")
	}

	var r0 *clients_a_n.IscsiServiceModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiServiceModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiServiceModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiServiceModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiServiceModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiSessionCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiSessionCollectionGet(params *clients_a_n.IscsiSessionCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiSessionCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiSessionCollectionGet")
	}

	var r0 *clients_a_n.IscsiSessionCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiSessionCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiSessionCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiSessionCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiSessionCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiSessionCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiSessionCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IscsiSessionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) IscsiSessionGet(params *clients_a_n.IscsiSessionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.IscsiSessionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IscsiSessionGet")
	}

	var r0 *clients_a_n.IscsiSessionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiSessionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.IscsiSessionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.IscsiSessionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.IscsiSessionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.IscsiSessionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.IscsiSessionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunAttributeCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunAttributeCollectionGet(params *clients_a_n.LunAttributeCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunAttributeCollectionGet")
	}

	var r0 *clients_a_n.LunAttributeCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunAttributeCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunAttributeCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunAttributeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunAttributeCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunAttributeCreate(params *clients_a_n.LunAttributeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunAttributeCreate")
	}

	var r0 *clients_a_n.LunAttributeCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunAttributeCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunAttributeCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunAttributeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunAttributeDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunAttributeDelete(params *clients_a_n.LunAttributeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunAttributeDelete")
	}

	var r0 *clients_a_n.LunAttributeDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunAttributeDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunAttributeDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunAttributeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunAttributeGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunAttributeGet(params *clients_a_n.LunAttributeGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunAttributeGet")
	}

	var r0 *clients_a_n.LunAttributeGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunAttributeGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunAttributeGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunAttributeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunAttributeModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunAttributeModify(params *clients_a_n.LunAttributeModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunAttributeModify")
	}

	var r0 *clients_a_n.LunAttributeModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunAttributeModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunAttributeModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunAttributeModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunAttributeModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunAttributeModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunCollectionGet(params *clients_a_n.LunCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunCollectionGet")
	}

	var r0 *clients_a_n.LunCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunCreate(params *clients_a_n.LunCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunCreate")
	}

	var r0 *clients_a_n.LunCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunDelete(params *clients_a_n.LunDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunDelete")
	}

	var r0 *clients_a_n.LunDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunGet(params *clients_a_n.LunGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunGet")
	}

	var r0 *clients_a_n.LunGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapCollectionGet(params *clients_a_n.LunMapCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapCollectionGet")
	}

	var r0 *clients_a_n.LunMapCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapCreate(params *clients_a_n.LunMapCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapCreate")
	}

	var r0 *clients_a_n.LunMapCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapDelete(params *clients_a_n.LunMapDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapDelete")
	}

	var r0 *clients_a_n.LunMapDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapGet(params *clients_a_n.LunMapGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapGet")
	}

	var r0 *clients_a_n.LunMapGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapReportingNodeCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapReportingNodeCollectionGet(params *clients_a_n.LunMapReportingNodeCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapReportingNodeCollectionGet")
	}

	var r0 *clients_a_n.LunMapReportingNodeCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapReportingNodeCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapReportingNodeCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapReportingNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapReportingNodeCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapReportingNodeCreate(params *clients_a_n.LunMapReportingNodeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapReportingNodeCreate")
	}

	var r0 *clients_a_n.LunMapReportingNodeCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapReportingNodeCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapReportingNodeCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapReportingNodeCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapReportingNodeDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapReportingNodeDelete(params *clients_a_n.LunMapReportingNodeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapReportingNodeDelete")
	}

	var r0 *clients_a_n.LunMapReportingNodeDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapReportingNodeDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapReportingNodeDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapReportingNodeDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunMapReportingNodeGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunMapReportingNodeGet(params *clients_a_n.LunMapReportingNodeGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunMapReportingNodeGet")
	}

	var r0 *clients_a_n.LunMapReportingNodeGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunMapReportingNodeGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunMapReportingNodeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunMapReportingNodeGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunMapReportingNodeGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunMapReportingNodeGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LunModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) LunModify(params *clients_a_n.LunModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.LunModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LunModify")
	}

	var r0 *clients_a_n.LunModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.LunModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.LunModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.LunModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.LunModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.LunModifyParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceFcpMetricCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceFcpMetricCollectionGet(params *clients_a_n.PerformanceFcpMetricCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceFcpMetricCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceFcpMetricCollectionGet")
	}

	var r0 *clients_a_n.PerformanceFcpMetricCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceFcpMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceFcpMetricCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceFcpMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceFcpMetricCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceFcpMetricCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceFcpMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceFcpMetricGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceFcpMetricGet(params *clients_a_n.PerformanceFcpMetricGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceFcpMetricGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceFcpMetricGet")
	}

	var r0 *clients_a_n.PerformanceFcpMetricGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceFcpMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceFcpMetricGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceFcpMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceFcpMetricGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceFcpMetricGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceFcpMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceIscsiMetricCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceIscsiMetricCollectionGet(params *clients_a_n.PerformanceIscsiMetricCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceIscsiMetricCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceIscsiMetricCollectionGet")
	}

	var r0 *clients_a_n.PerformanceIscsiMetricCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceIscsiMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceIscsiMetricCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceIscsiMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceIscsiMetricCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceIscsiMetricCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceIscsiMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceIscsiMetricGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceIscsiMetricGet(params *clients_a_n.PerformanceIscsiMetricGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceIscsiMetricGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceIscsiMetricGet")
	}

	var r0 *clients_a_n.PerformanceIscsiMetricGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceIscsiMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceIscsiMetricGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceIscsiMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceIscsiMetricGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceIscsiMetricGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceIscsiMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceLunMetricCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceLunMetricCollectionGet(params *clients_a_n.PerformanceLunMetricCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceLunMetricCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceLunMetricCollectionGet")
	}

	var r0 *clients_a_n.PerformanceLunMetricCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceLunMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceLunMetricCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceLunMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceLunMetricCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceLunMetricCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceLunMetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceLunMetricGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceLunMetricGet(params *clients_a_n.PerformanceLunMetricGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PerformanceLunMetricGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceLunMetricGet")
	}

	var r0 *clients_a_n.PerformanceLunMetricGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceLunMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PerformanceLunMetricGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PerformanceLunMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PerformanceLunMetricGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PerformanceLunMetricGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PerformanceLunMetricGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetCollectionGet(params *clients_a_n.PortsetCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetCollectionGet")
	}

	var r0 *clients_a_n.PortsetCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetCreate(params *clients_a_n.PortsetCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetCreate")
	}

	var r0 *clients_a_n.PortsetCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetDelete(params *clients_a_n.PortsetDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetDelete")
	}

	var r0 *clients_a_n.PortsetDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetGet(params *clients_a_n.PortsetGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetGet")
	}

	var r0 *clients_a_n.PortsetGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetInterfaceCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetInterfaceCollectionGet(params *clients_a_n.PortsetInterfaceCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetInterfaceCollectionGet")
	}

	var r0 *clients_a_n.PortsetInterfaceCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetInterfaceCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetInterfaceCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetInterfaceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetInterfaceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetInterfaceCreate(params *clients_a_n.PortsetInterfaceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetInterfaceCreate")
	}

	var r0 *clients_a_n.PortsetInterfaceCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetInterfaceCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetInterfaceCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetInterfaceCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetInterfaceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetInterfaceDelete(params *clients_a_n.PortsetInterfaceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetInterfaceDelete")
	}

	var r0 *clients_a_n.PortsetInterfaceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetInterfaceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetInterfaceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetInterfaceDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortsetInterfaceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PortsetInterfaceGet(params *clients_a_n.PortsetInterfaceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PortsetInterfaceGet")
	}

	var r0 *clients_a_n.PortsetInterfaceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.PortsetInterfaceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.PortsetInterfaceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.PortsetInterfaceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.PortsetInterfaceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.PortsetInterfaceGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// VvolBindingCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VvolBindingCollectionGet(params *clients_a_n.VvolBindingCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VvolBindingCollectionGet")
	}

	var r0 *clients_a_n.VvolBindingCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.VvolBindingCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.VvolBindingCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.VvolBindingCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VvolBindingCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VvolBindingCreate(params *clients_a_n.VvolBindingCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VvolBindingCreate")
	}

	var r0 *clients_a_n.VvolBindingCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.VvolBindingCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.VvolBindingCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.VvolBindingCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VvolBindingDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VvolBindingDelete(params *clients_a_n.VvolBindingDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VvolBindingDelete")
	}

	var r0 *clients_a_n.VvolBindingDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.VvolBindingDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.VvolBindingDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.VvolBindingDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VvolBindingGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) VvolBindingGet(params *clients_a_n.VvolBindingGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VvolBindingGet")
	}

	var r0 *clients_a_n.VvolBindingGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.VvolBindingGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.VvolBindingGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.VvolBindingGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.VvolBindingGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.VvolBindingGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WwpnAliasCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) WwpnAliasCollectionGet(params *clients_a_n.WwpnAliasCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WwpnAliasCollectionGet")
	}

	var r0 *clients_a_n.WwpnAliasCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.WwpnAliasCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.WwpnAliasCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.WwpnAliasCollectionGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WwpnAliasCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) WwpnAliasCreate(params *clients_a_n.WwpnAliasCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WwpnAliasCreate")
	}

	var r0 *clients_a_n.WwpnAliasCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.WwpnAliasCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.WwpnAliasCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.WwpnAliasCreateParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WwpnAliasDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) WwpnAliasDelete(params *clients_a_n.WwpnAliasDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WwpnAliasDelete")
	}

	var r0 *clients_a_n.WwpnAliasDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.WwpnAliasDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.WwpnAliasDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.WwpnAliasDeleteParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WwpnAliasGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) WwpnAliasGet(params *clients_a_n.WwpnAliasGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WwpnAliasGet")
	}

	var r0 *clients_a_n.WwpnAliasGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) (*clients_a_n.WwpnAliasGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clients_a_n.WwpnAliasGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) *clients_a_n.WwpnAliasGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients_a_n.WwpnAliasGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clients_a_n.WwpnAliasGetParams, runtime.ClientAuthInfoWriter, ...clients_a_n.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
