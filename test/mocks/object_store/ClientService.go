// Code generated by mockery v2.52.3. DO NOT EDIT.

package object_store

import (
	clientobject_store "github.com/metal-stack/ontap-go/api/client/object_store"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// AllSvmBucketsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AllSvmBucketsCollectionGet(params *clientobject_store.AllSvmBucketsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.AllSvmBucketsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllSvmBucketsCollectionGet")
	}

	var r0 *clientobject_store.AllSvmBucketsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.AllSvmBucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.AllSvmBucketsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.AllSvmBucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.AllSvmBucketsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.AllSvmBucketsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.AllSvmBucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) BucketsCollectionGet(params *clientobject_store.BucketsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.BucketsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BucketsCollectionGet")
	}

	var r0 *clientobject_store.BucketsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.BucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.BucketsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.BucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.BucketsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.BucketsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.BucketsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceS3MetricCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PerformanceS3MetricCollectionGet(params *clientobject_store.PerformanceS3MetricCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.PerformanceS3MetricCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceS3MetricCollectionGet")
	}

	var r0 *clientobject_store.PerformanceS3MetricCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.PerformanceS3MetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.PerformanceS3MetricCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.PerformanceS3MetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.PerformanceS3MetricCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.PerformanceS3MetricCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.PerformanceS3MetricCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketCreate(params *clientobject_store.S3BucketCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketCreateCreated, *clientobject_store.S3BucketCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketCreate")
	}

	var r0 *clientobject_store.S3BucketCreateCreated
	var r1 *clientobject_store.S3BucketCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketCreateCreated, *clientobject_store.S3BucketCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketDelete(params *clientobject_store.S3BucketDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketDeleteOK, *clientobject_store.S3BucketDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketDelete")
	}

	var r0 *clientobject_store.S3BucketDeleteOK
	var r1 *clientobject_store.S3BucketDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketDeleteOK, *clientobject_store.S3BucketDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketGet(params *clientobject_store.S3BucketGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketGet")
	}

	var r0 *clientobject_store.S3BucketGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketLifecycleRuleCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketLifecycleRuleCollectionGet(params *clientobject_store.S3BucketLifecycleRuleCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketLifecycleRuleCollectionGet")
	}

	var r0 *clientobject_store.S3BucketLifecycleRuleCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketLifecycleRuleCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketLifecycleRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketLifecycleRuleCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketLifecycleRuleCreate(params *clientobject_store.S3BucketLifecycleRuleCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleCreateCreated, *clientobject_store.S3BucketLifecycleRuleCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketLifecycleRuleCreate")
	}

	var r0 *clientobject_store.S3BucketLifecycleRuleCreateCreated
	var r1 *clientobject_store.S3BucketLifecycleRuleCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleCreateCreated, *clientobject_store.S3BucketLifecycleRuleCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketLifecycleRuleCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketLifecycleRuleCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketLifecycleRuleCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketLifecycleRuleCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketLifecycleRuleDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketLifecycleRuleDelete(params *clientobject_store.S3BucketLifecycleRuleDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketLifecycleRuleDelete")
	}

	var r0 *clientobject_store.S3BucketLifecycleRuleDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketLifecycleRuleDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketLifecycleRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketLifecycleRuleGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketLifecycleRuleGet(params *clientobject_store.S3BucketLifecycleRuleGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketLifecycleRuleGet")
	}

	var r0 *clientobject_store.S3BucketLifecycleRuleGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketLifecycleRuleGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketLifecycleRuleGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketLifecycleRuleModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketLifecycleRuleModify(params *clientobject_store.S3BucketLifecycleRuleModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleModifyOK, *clientobject_store.S3BucketLifecycleRuleModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketLifecycleRuleModify")
	}

	var r0 *clientobject_store.S3BucketLifecycleRuleModifyOK
	var r1 *clientobject_store.S3BucketLifecycleRuleModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketLifecycleRuleModifyOK, *clientobject_store.S3BucketLifecycleRuleModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketLifecycleRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketLifecycleRuleModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketLifecycleRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketLifecycleRuleModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketLifecycleRuleModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketLifecycleRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketModify(params *clientobject_store.S3BucketModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketModifyOK, *clientobject_store.S3BucketModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketModify")
	}

	var r0 *clientobject_store.S3BucketModifyOK
	var r1 *clientobject_store.S3BucketModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketModifyOK, *clientobject_store.S3BucketModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketSnapshotCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSnapshotCollectionGet(params *clientobject_store.S3BucketSnapshotCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSnapshotCollectionGet")
	}

	var r0 *clientobject_store.S3BucketSnapshotCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSnapshotCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSnapshotCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketSnapshotCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSnapshotCreate(params *clientobject_store.S3BucketSnapshotCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotCreateCreated, *clientobject_store.S3BucketSnapshotCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSnapshotCreate")
	}

	var r0 *clientobject_store.S3BucketSnapshotCreateCreated
	var r1 *clientobject_store.S3BucketSnapshotCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotCreateCreated, *clientobject_store.S3BucketSnapshotCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSnapshotCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSnapshotCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSnapshotCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketSnapshotCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketSnapshotDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSnapshotDelete(params *clientobject_store.S3BucketSnapshotDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSnapshotDelete")
	}

	var r0 *clientobject_store.S3BucketSnapshotDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSnapshotDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSnapshotDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketSnapshotGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSnapshotGet(params *clientobject_store.S3BucketSnapshotGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSnapshotGet")
	}

	var r0 *clientobject_store.S3BucketSnapshotGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSnapshotGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSnapshotGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSnapshotGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketSvmCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSvmCreate(params *clientobject_store.S3BucketSvmCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmCreateCreated, *clientobject_store.S3BucketSvmCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSvmCreate")
	}

	var r0 *clientobject_store.S3BucketSvmCreateCreated
	var r1 *clientobject_store.S3BucketSvmCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmCreateCreated, *clientobject_store.S3BucketSvmCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSvmCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSvmCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketSvmCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketSvmCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketSvmDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSvmDelete(params *clientobject_store.S3BucketSvmDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmDeleteOK, *clientobject_store.S3BucketSvmDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSvmDelete")
	}

	var r0 *clientobject_store.S3BucketSvmDeleteOK
	var r1 *clientobject_store.S3BucketSvmDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmDeleteOK, *clientobject_store.S3BucketSvmDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSvmDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSvmDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketSvmDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketSvmDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3BucketSvmGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSvmGet(params *clientobject_store.S3BucketSvmGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSvmGet")
	}

	var r0 *clientobject_store.S3BucketSvmGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSvmGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSvmGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3BucketSvmModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3BucketSvmModify(params *clientobject_store.S3BucketSvmModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmModifyOK, *clientobject_store.S3BucketSvmModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3BucketSvmModify")
	}

	var r0 *clientobject_store.S3BucketSvmModifyOK
	var r1 *clientobject_store.S3BucketSvmModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3BucketSvmModifyOK, *clientobject_store.S3BucketSvmModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3BucketSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3BucketSvmModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3BucketSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3BucketSvmModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientobject_store.S3BucketSvmModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientobject_store.S3BucketSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// S3GroupCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3GroupCollectionGet(params *clientobject_store.S3GroupCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3GroupCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3GroupCollectionGet")
	}

	var r0 *clientobject_store.S3GroupCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3GroupCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3GroupCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3GroupCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3GroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3GroupCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3GroupCreate(params *clientobject_store.S3GroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3GroupCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3GroupCreate")
	}

	var r0 *clientobject_store.S3GroupCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3GroupCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3GroupCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3GroupCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3GroupCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3GroupDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3GroupDelete(params *clientobject_store.S3GroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3GroupDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3GroupDelete")
	}

	var r0 *clientobject_store.S3GroupDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3GroupDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3GroupDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3GroupDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3GroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3GroupGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3GroupGet(params *clientobject_store.S3GroupGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3GroupGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3GroupGet")
	}

	var r0 *clientobject_store.S3GroupGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3GroupGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3GroupGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3GroupGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3GroupGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3GroupModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3GroupModify(params *clientobject_store.S3GroupModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3GroupModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3GroupModify")
	}

	var r0 *clientobject_store.S3GroupModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3GroupModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3GroupModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3GroupModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3GroupModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3GroupModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3PolicyCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3PolicyCollectionGet(params *clientobject_store.S3PolicyCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3PolicyCollectionGet")
	}

	var r0 *clientobject_store.S3PolicyCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3PolicyCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3PolicyCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3PolicyCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3PolicyCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3PolicyCreate(params *clientobject_store.S3PolicyCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3PolicyCreate")
	}

	var r0 *clientobject_store.S3PolicyCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3PolicyCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3PolicyCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3PolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3PolicyDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3PolicyDelete(params *clientobject_store.S3PolicyDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3PolicyDelete")
	}

	var r0 *clientobject_store.S3PolicyDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3PolicyDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3PolicyDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3PolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3PolicyGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3PolicyGet(params *clientobject_store.S3PolicyGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3PolicyGet")
	}

	var r0 *clientobject_store.S3PolicyGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3PolicyGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3PolicyGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3PolicyGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3PolicyModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3PolicyModify(params *clientobject_store.S3PolicyModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3PolicyModify")
	}

	var r0 *clientobject_store.S3PolicyModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3PolicyModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3PolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3PolicyModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3PolicyModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3PolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3ServiceCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3ServiceCollectionGet(params *clientobject_store.S3ServiceCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3ServiceCollectionGet")
	}

	var r0 *clientobject_store.S3ServiceCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3ServiceCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3ServiceCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3ServiceCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3ServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3ServiceCreate(params *clientobject_store.S3ServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3ServiceCreate")
	}

	var r0 *clientobject_store.S3ServiceCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3ServiceCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3ServiceCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3ServiceCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3ServiceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3ServiceDelete(params *clientobject_store.S3ServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3ServiceDelete")
	}

	var r0 *clientobject_store.S3ServiceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3ServiceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3ServiceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3ServiceDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3ServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3ServiceGet(params *clientobject_store.S3ServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3ServiceGet")
	}

	var r0 *clientobject_store.S3ServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3ServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3ServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3ServiceGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3ServiceModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3ServiceModify(params *clientobject_store.S3ServiceModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3ServiceModify")
	}

	var r0 *clientobject_store.S3ServiceModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3ServiceModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3ServiceModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3ServiceModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3ServiceModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3ServiceModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UserCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UserCollectionGet(params *clientobject_store.S3UserCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3UserCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UserCollectionGet")
	}

	var r0 *clientobject_store.S3UserCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3UserCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3UserCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3UserCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3UserCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UserCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UserCreate(params *clientobject_store.S3UserCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3UserCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UserCreate")
	}

	var r0 *clientobject_store.S3UserCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3UserCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3UserCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3UserCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3UserCreateParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UserDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UserDelete(params *clientobject_store.S3UserDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3UserDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UserDelete")
	}

	var r0 *clientobject_store.S3UserDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3UserDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3UserDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3UserDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3UserDeleteParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UserGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UserGet(params *clientobject_store.S3UserGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3UserGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UserGet")
	}

	var r0 *clientobject_store.S3UserGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3UserGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3UserGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3UserGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3UserGetParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3UserModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) S3UserModify(params *clientobject_store.S3UserModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientobject_store.ClientOption) (*clientobject_store.S3UserModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for S3UserModify")
	}

	var r0 *clientobject_store.S3UserModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) (*clientobject_store.S3UserModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientobject_store.S3UserModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) *clientobject_store.S3UserModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientobject_store.S3UserModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientobject_store.S3UserModifyParams, runtime.ClientAuthInfoWriter, ...clientobject_store.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
