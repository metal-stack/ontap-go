// Code generated by mockery v2.52.3. DO NOT EDIT.

package application

import (
	clientapplication "github.com/metal-stack/ontap-go/api/client/application"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ApplicationCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationCollectionGet(params *clientapplication.ApplicationCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationCollectionGet")
	}

	var r0 *clientapplication.ApplicationCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationComponentCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentCollectionGet(params *clientapplication.ApplicationComponentCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentCollectionGet")
	}

	var r0 *clientapplication.ApplicationComponentCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationComponentGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentGet(params *clientapplication.ApplicationComponentGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentGet")
	}

	var r0 *clientapplication.ApplicationComponentGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationComponentSnapshotCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentSnapshotCollectionGet(params *clientapplication.ApplicationComponentSnapshotCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentSnapshotCollectionGet")
	}

	var r0 *clientapplication.ApplicationComponentSnapshotCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentSnapshotCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationComponentSnapshotCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentSnapshotCreate(params *clientapplication.ApplicationComponentSnapshotCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotCreateCreated, *clientapplication.ApplicationComponentSnapshotCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentSnapshotCreate")
	}

	var r0 *clientapplication.ApplicationComponentSnapshotCreateCreated
	var r1 *clientapplication.ApplicationComponentSnapshotCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotCreateCreated, *clientapplication.ApplicationComponentSnapshotCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentSnapshotCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationComponentSnapshotCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationComponentSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationComponentSnapshotDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentSnapshotDelete(params *clientapplication.ApplicationComponentSnapshotDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotDeleteOK, *clientapplication.ApplicationComponentSnapshotDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentSnapshotDelete")
	}

	var r0 *clientapplication.ApplicationComponentSnapshotDeleteOK
	var r1 *clientapplication.ApplicationComponentSnapshotDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotDeleteOK, *clientapplication.ApplicationComponentSnapshotDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentSnapshotDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationComponentSnapshotDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationComponentSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationComponentSnapshotGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentSnapshotGet(params *clientapplication.ApplicationComponentSnapshotGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentSnapshotGet")
	}

	var r0 *clientapplication.ApplicationComponentSnapshotGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentSnapshotGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationComponentSnapshotRestore provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationComponentSnapshotRestore(params *clientapplication.ApplicationComponentSnapshotRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotRestoreCreated, *clientapplication.ApplicationComponentSnapshotRestoreAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationComponentSnapshotRestore")
	}

	var r0 *clientapplication.ApplicationComponentSnapshotRestoreCreated
	var r1 *clientapplication.ApplicationComponentSnapshotRestoreAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationComponentSnapshotRestoreCreated, *clientapplication.ApplicationComponentSnapshotRestoreAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationComponentSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotRestoreCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationComponentSnapshotRestoreCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationComponentSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationComponentSnapshotRestoreAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationComponentSnapshotRestoreAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationComponentSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationCreate(params *clientapplication.ApplicationCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationCreateCreated, *clientapplication.ApplicationCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationCreate")
	}

	var r0 *clientapplication.ApplicationCreateCreated
	var r1 *clientapplication.ApplicationCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationCreateCreated, *clientapplication.ApplicationCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationDelete(params *clientapplication.ApplicationDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationDeleteOK, *clientapplication.ApplicationDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationDelete")
	}

	var r0 *clientapplication.ApplicationDeleteOK
	var r1 *clientapplication.ApplicationDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationDeleteOK, *clientapplication.ApplicationDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationGet(params *clientapplication.ApplicationGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationGet")
	}

	var r0 *clientapplication.ApplicationGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationModify(params *clientapplication.ApplicationModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationModifyOK, *clientapplication.ApplicationModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationModify")
	}

	var r0 *clientapplication.ApplicationModifyOK
	var r1 *clientapplication.ApplicationModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationModifyOK, *clientapplication.ApplicationModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationSnapshotCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationSnapshotCollectionGet(params *clientapplication.ApplicationSnapshotCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSnapshotCollectionGet")
	}

	var r0 *clientapplication.ApplicationSnapshotCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationSnapshotCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationSnapshotCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationSnapshotCreate(params *clientapplication.ApplicationSnapshotCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotCreateCreated, *clientapplication.ApplicationSnapshotCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSnapshotCreate")
	}

	var r0 *clientapplication.ApplicationSnapshotCreateCreated
	var r1 *clientapplication.ApplicationSnapshotCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotCreateCreated, *clientapplication.ApplicationSnapshotCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationSnapshotCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationSnapshotCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationSnapshotDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationSnapshotDelete(params *clientapplication.ApplicationSnapshotDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotDeleteOK, *clientapplication.ApplicationSnapshotDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSnapshotDelete")
	}

	var r0 *clientapplication.ApplicationSnapshotDeleteOK
	var r1 *clientapplication.ApplicationSnapshotDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotDeleteOK, *clientapplication.ApplicationSnapshotDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationSnapshotDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationSnapshotDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationSnapshotGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationSnapshotGet(params *clientapplication.ApplicationSnapshotGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSnapshotGet")
	}

	var r0 *clientapplication.ApplicationSnapshotGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationSnapshotGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationSnapshotRestore provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationSnapshotRestore(params *clientapplication.ApplicationSnapshotRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotRestoreCreated, *clientapplication.ApplicationSnapshotRestoreAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSnapshotRestore")
	}

	var r0 *clientapplication.ApplicationSnapshotRestoreCreated
	var r1 *clientapplication.ApplicationSnapshotRestoreAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationSnapshotRestoreCreated, *clientapplication.ApplicationSnapshotRestoreAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotRestoreCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationSnapshotRestoreCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationSnapshotRestoreAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ApplicationSnapshotRestoreAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ApplicationSnapshotRestoreParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ApplicationTemplateCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationTemplateCollectionGet(params *clientapplication.ApplicationTemplateCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationTemplateCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationTemplateCollectionGet")
	}

	var r0 *clientapplication.ApplicationTemplateCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationTemplateCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationTemplateCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationTemplateCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationTemplateCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationTemplateCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationTemplateCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationTemplateGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ApplicationTemplateGet(params *clientapplication.ApplicationTemplateGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ApplicationTemplateGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationTemplateGet")
	}

	var r0 *clientapplication.ApplicationTemplateGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationTemplateGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ApplicationTemplateGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ApplicationTemplateGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ApplicationTemplateGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ApplicationTemplateGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ApplicationTemplateGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupCollectionGet(params *clientapplication.ConsistencyGroupCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupCollectionGet")
	}

	var r0 *clientapplication.ConsistencyGroupCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupCreate(params *clientapplication.ConsistencyGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupCreateCreated, *clientapplication.ConsistencyGroupCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupCreate")
	}

	var r0 *clientapplication.ConsistencyGroupCreateCreated
	var r1 *clientapplication.ConsistencyGroupCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupCreateCreated, *clientapplication.ConsistencyGroupCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsistencyGroupDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupDelete(params *clientapplication.ConsistencyGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupDeleteOK, *clientapplication.ConsistencyGroupDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupDelete")
	}

	var r0 *clientapplication.ConsistencyGroupDeleteOK
	var r1 *clientapplication.ConsistencyGroupDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupDeleteOK, *clientapplication.ConsistencyGroupDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsistencyGroupGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupGet(params *clientapplication.ConsistencyGroupGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupGet")
	}

	var r0 *clientapplication.ConsistencyGroupGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupMetricsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupMetricsCollectionGet(params *clientapplication.ConsistencyGroupMetricsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupMetricsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupMetricsCollectionGet")
	}

	var r0 *clientapplication.ConsistencyGroupMetricsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupMetricsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupMetricsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupMetricsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupMetricsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupMetricsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupMetricsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupModify(params *clientapplication.ConsistencyGroupModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupModifyOK, *clientapplication.ConsistencyGroupModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupModify")
	}

	var r0 *clientapplication.ConsistencyGroupModifyOK
	var r1 *clientapplication.ConsistencyGroupModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupModifyOK, *clientapplication.ConsistencyGroupModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsistencyGroupSnapshotCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupSnapshotCollectionGet(params *clientapplication.ConsistencyGroupSnapshotCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupSnapshotCollectionGet")
	}

	var r0 *clientapplication.ConsistencyGroupSnapshotCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupSnapshotCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupSnapshotCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupSnapshotCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupSnapshotCreate(params *clientapplication.ConsistencyGroupSnapshotCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotCreateCreated, *clientapplication.ConsistencyGroupSnapshotCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupSnapshotCreate")
	}

	var r0 *clientapplication.ConsistencyGroupSnapshotCreateCreated
	var r1 *clientapplication.ConsistencyGroupSnapshotCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotCreateCreated, *clientapplication.ConsistencyGroupSnapshotCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupSnapshotCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupSnapshotCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupSnapshotCreateParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsistencyGroupSnapshotDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupSnapshotDelete(params *clientapplication.ConsistencyGroupSnapshotDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotDeleteOK, *clientapplication.ConsistencyGroupSnapshotDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupSnapshotDelete")
	}

	var r0 *clientapplication.ConsistencyGroupSnapshotDeleteOK
	var r1 *clientapplication.ConsistencyGroupSnapshotDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotDeleteOK, *clientapplication.ConsistencyGroupSnapshotDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupSnapshotDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupSnapshotDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupSnapshotDeleteParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsistencyGroupSnapshotGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupSnapshotGet(params *clientapplication.ConsistencyGroupSnapshotGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupSnapshotGet")
	}

	var r0 *clientapplication.ConsistencyGroupSnapshotGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupSnapshotGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupSnapshotGetParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsistencyGroupSnapshotModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConsistencyGroupSnapshotModify(params *clientapplication.ConsistencyGroupSnapshotModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotModifyOK, *clientapplication.ConsistencyGroupSnapshotModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConsistencyGroupSnapshotModify")
	}

	var r0 *clientapplication.ConsistencyGroupSnapshotModifyOK
	var r1 *clientapplication.ConsistencyGroupSnapshotModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) (*clientapplication.ConsistencyGroupSnapshotModifyOK, *clientapplication.ConsistencyGroupSnapshotModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientapplication.ConsistencyGroupSnapshotModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientapplication.ConsistencyGroupSnapshotModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientapplication.ConsistencyGroupSnapshotModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) *clientapplication.ConsistencyGroupSnapshotModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientapplication.ConsistencyGroupSnapshotModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientapplication.ConsistencyGroupSnapshotModifyParams, runtime.ClientAuthInfoWriter, ...clientapplication.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
