// Code generated by mockery v2.51.0. DO NOT EDIT.

package snap_mirror

import (
	clientsnap_mirror "github.com/metal-stack/ontap-go/api/client/snap_mirror"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// SnapmirrorPoliciesGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorPoliciesGet(params *clientsnap_mirror.SnapmirrorPoliciesGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPoliciesGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorPoliciesGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorPoliciesGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPoliciesGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPoliciesGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPoliciesGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPoliciesGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorPoliciesGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorPoliciesGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorPolicyCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorPolicyCreate(params *clientsnap_mirror.SnapmirrorPolicyCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyCreateCreated, *clientsnap_mirror.SnapmirrorPolicyCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorPolicyCreate")
	}

	var r0 *clientsnap_mirror.SnapmirrorPolicyCreateCreated
	var r1 *clientsnap_mirror.SnapmirrorPolicyCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyCreateCreated, *clientsnap_mirror.SnapmirrorPolicyCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorPolicyCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorPolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorPolicyCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorPolicyCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorPolicyDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorPolicyDelete(params *clientsnap_mirror.SnapmirrorPolicyDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyDeleteOK, *clientsnap_mirror.SnapmirrorPolicyDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorPolicyDelete")
	}

	var r0 *clientsnap_mirror.SnapmirrorPolicyDeleteOK
	var r1 *clientsnap_mirror.SnapmirrorPolicyDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyDeleteOK, *clientsnap_mirror.SnapmirrorPolicyDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorPolicyDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorPolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorPolicyDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorPolicyDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorPolicyGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorPolicyGet(params *clientsnap_mirror.SnapmirrorPolicyGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorPolicyGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorPolicyGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorPolicyGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorPolicyGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorPolicyModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorPolicyModify(params *clientsnap_mirror.SnapmirrorPolicyModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyModifyOK, *clientsnap_mirror.SnapmirrorPolicyModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorPolicyModify")
	}

	var r0 *clientsnap_mirror.SnapmirrorPolicyModifyOK
	var r1 *clientsnap_mirror.SnapmirrorPolicyModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorPolicyModifyOK, *clientsnap_mirror.SnapmirrorPolicyModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorPolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorPolicyModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorPolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorPolicyModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorPolicyModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorPolicyModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorRelationshipCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipCreate(params *clientsnap_mirror.SnapmirrorRelationshipCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipCreateCreated, *clientsnap_mirror.SnapmirrorRelationshipCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipCreate")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipCreateCreated
	var r1 *clientsnap_mirror.SnapmirrorRelationshipCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipCreateCreated, *clientsnap_mirror.SnapmirrorRelationshipCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorRelationshipCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorRelationshipCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorRelationshipDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipDelete(params *clientsnap_mirror.SnapmirrorRelationshipDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipDeleteOK, *clientsnap_mirror.SnapmirrorRelationshipDeleteAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipDelete")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipDeleteOK
	var r1 *clientsnap_mirror.SnapmirrorRelationshipDeleteAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipDeleteOK, *clientsnap_mirror.SnapmirrorRelationshipDeleteAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipDeleteAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorRelationshipDeleteAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorRelationshipDeleteParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorRelationshipGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipGet(params *clientsnap_mirror.SnapmirrorRelationshipGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorRelationshipModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipModify(params *clientsnap_mirror.SnapmirrorRelationshipModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipModifyOK, *clientsnap_mirror.SnapmirrorRelationshipModifyAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipModify")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipModifyOK
	var r1 *clientsnap_mirror.SnapmirrorRelationshipModifyAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipModifyOK, *clientsnap_mirror.SnapmirrorRelationshipModifyAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipModifyAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsnap_mirror.SnapmirrorRelationshipModifyAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsnap_mirror.SnapmirrorRelationshipModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SnapmirrorRelationshipTransferCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipTransferCreate(params *clientsnap_mirror.SnapmirrorRelationshipTransferCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipTransferCreate")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipTransferCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipTransferCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipTransferCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferCreateParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorRelationshipTransferGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipTransferGet(params *clientsnap_mirror.SnapmirrorRelationshipTransferGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipTransferGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipTransferGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipTransferGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipTransferGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorRelationshipTransferModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipTransferModify(params *clientsnap_mirror.SnapmirrorRelationshipTransferModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipTransferModify")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipTransferModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransferModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipTransferModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipTransferModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipTransferModifyParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorRelationshipTransfersGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipTransfersGet(params *clientsnap_mirror.SnapmirrorRelationshipTransfersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransfersGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipTransfersGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipTransfersGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransfersGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipTransfersGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipTransfersGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipTransfersGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipTransfersGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipTransfersGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapmirrorRelationshipsGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnapmirrorRelationshipsGet(params *clientsnap_mirror.SnapmirrorRelationshipsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapmirrorRelationshipsGet")
	}

	var r0 *clientsnap_mirror.SnapmirrorRelationshipsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipsGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) (*clientsnap_mirror.SnapmirrorRelationshipsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsnap_mirror.SnapmirrorRelationshipsGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) *clientsnap_mirror.SnapmirrorRelationshipsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsnap_mirror.SnapmirrorRelationshipsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsnap_mirror.SnapmirrorRelationshipsGetParams, runtime.ClientAuthInfoWriter, ...clientsnap_mirror.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
