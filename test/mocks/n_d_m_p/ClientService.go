// Code generated by mockery v2.51.0. DO NOT EDIT.

package n_d_m_p

import (
	clientn_d_m_p "github.com/metal-stack/ontap-go/api/client/n_d_m_p"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// ClusterNdmpGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterNdmpGet(params *clientn_d_m_p.ClusterNdmpGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.ClusterNdmpGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterNdmpGet")
	}

	var r0 *clientn_d_m_p.ClusterNdmpGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.ClusterNdmpGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.ClusterNdmpGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.ClusterNdmpGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.ClusterNdmpGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.ClusterNdmpGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.ClusterNdmpGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterNdmpModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ClusterNdmpModify(params *clientn_d_m_p.ClusterNdmpModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.ClusterNdmpModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClusterNdmpModify")
	}

	var r0 *clientn_d_m_p.ClusterNdmpModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.ClusterNdmpModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.ClusterNdmpModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.ClusterNdmpModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.ClusterNdmpModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.ClusterNdmpModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.ClusterNdmpModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeCollectionGet(params *clientn_d_m_p.NdmpNodeCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeCollectionGet")
	}

	var r0 *clientn_d_m_p.NdmpNodeCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeGet(params *clientn_d_m_p.NdmpNodeGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeGet")
	}

	var r0 *clientn_d_m_p.NdmpNodeGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeModify(params *clientn_d_m_p.NdmpNodeModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeModify")
	}

	var r0 *clientn_d_m_p.NdmpNodeModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeSessionDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeSessionDelete(params *clientn_d_m_p.NdmpNodeSessionDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeSessionDelete")
	}

	var r0 *clientn_d_m_p.NdmpNodeSessionDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionDeleteParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionDeleteParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeSessionDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeSessionDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeSessionDeleteParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeSessionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeSessionGet(params *clientn_d_m_p.NdmpNodeSessionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeSessionGet")
	}

	var r0 *clientn_d_m_p.NdmpNodeSessionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeSessionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeSessionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeSessionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpNodeSessionsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpNodeSessionsCollectionGet(params *clientn_d_m_p.NdmpNodeSessionsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpNodeSessionsCollectionGet")
	}

	var r0 *clientn_d_m_p.NdmpNodeSessionsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpNodeSessionsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpNodeSessionsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpNodeSessionsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpNodeSessionsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpNodeSessionsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpPasswordGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpPasswordGet(params *clientn_d_m_p.NdmpPasswordGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpPasswordGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpPasswordGet")
	}

	var r0 *clientn_d_m_p.NdmpPasswordGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpPasswordGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpPasswordGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpPasswordGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpPasswordGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpPasswordGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpPasswordGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpSvmCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpSvmCollectionGet(params *clientn_d_m_p.NdmpSvmCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpSvmCollectionGet")
	}

	var r0 *clientn_d_m_p.NdmpSvmCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpSvmCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpSvmCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpSvmCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpSvmGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpSvmGet(params *clientn_d_m_p.NdmpSvmGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpSvmGet")
	}

	var r0 *clientn_d_m_p.NdmpSvmGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpSvmGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpSvmGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpSvmGetParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NdmpSvmModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) NdmpSvmModify(params *clientn_d_m_p.NdmpSvmModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NdmpSvmModify")
	}

	var r0 *clientn_d_m_p.NdmpSvmModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) (*clientn_d_m_p.NdmpSvmModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientn_d_m_p.NdmpSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) *clientn_d_m_p.NdmpSvmModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientn_d_m_p.NdmpSvmModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientn_d_m_p.NdmpSvmModifyParams, runtime.ClientAuthInfoWriter, ...clientn_d_m_p.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
