// Code generated by mockery v2.51.0. DO NOT EDIT.

package support

import (
	clientsupport "github.com/metal-stack/ontap-go/api/client/support"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// AutoUpdateConfigurationCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateConfigurationCollectionGet(params *clientsupport.AutoUpdateConfigurationCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateConfigurationCollectionGet")
	}

	var r0 *clientsupport.AutoUpdateConfigurationCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateConfigurationCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateConfigurationCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateConfigurationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateConfigurationGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateConfigurationGet(params *clientsupport.AutoUpdateConfigurationGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateConfigurationGet")
	}

	var r0 *clientsupport.AutoUpdateConfigurationGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateConfigurationGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateConfigurationGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateConfigurationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateConfigurationModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateConfigurationModify(params *clientsupport.AutoUpdateConfigurationModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateConfigurationModify")
	}

	var r0 *clientsupport.AutoUpdateConfigurationModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateConfigurationModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateConfigurationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateConfigurationModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateConfigurationModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateConfigurationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateInfoGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateInfoGet(params *clientsupport.AutoUpdateInfoGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateInfoGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateInfoGet")
	}

	var r0 *clientsupport.AutoUpdateInfoGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateInfoGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateInfoGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateInfoGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateInfoGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateInfoGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateInfoGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateInfoModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateInfoModify(params *clientsupport.AutoUpdateInfoModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateInfoModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateInfoModify")
	}

	var r0 *clientsupport.AutoUpdateInfoModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateInfoModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateInfoModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateInfoModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateInfoModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateInfoModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateInfoModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateStatusCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateStatusCollectionGet(params *clientsupport.AutoUpdateStatusCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateStatusCollectionGet")
	}

	var r0 *clientsupport.AutoUpdateStatusCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateStatusCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateStatusCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateStatusCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateStatusGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateStatusGet(params *clientsupport.AutoUpdateStatusGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateStatusGet")
	}

	var r0 *clientsupport.AutoUpdateStatusGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateStatusGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateStatusGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateStatusGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUpdateStatusModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutoUpdateStatusModify(params *clientsupport.AutoUpdateStatusModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoUpdateStatusModify")
	}

	var r0 *clientsupport.AutoUpdateStatusModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutoUpdateStatusModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutoUpdateStatusModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutoUpdateStatusModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutoUpdateStatusModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutoUpdateStatusModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutosupportCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutosupportCreate(params *clientsupport.AutosupportCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutosupportCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutosupportCreate")
	}

	var r0 *clientsupport.AutosupportCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutosupportCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutosupportCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutosupportCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutosupportCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutosupportGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutosupportGet(params *clientsupport.AutosupportGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutosupportGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutosupportGet")
	}

	var r0 *clientsupport.AutosupportGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutosupportGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutosupportGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutosupportGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutosupportGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutosupportMessageCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutosupportMessageCollectionGet(params *clientsupport.AutosupportMessageCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutosupportMessageCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutosupportMessageCollectionGet")
	}

	var r0 *clientsupport.AutosupportMessageCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutosupportMessageCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutosupportMessageCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutosupportMessageCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutosupportMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutosupportMessageGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutosupportMessageGet(params *clientsupport.AutosupportMessageGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutosupportMessageGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutosupportMessageGet")
	}

	var r0 *clientsupport.AutosupportMessageGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportMessageGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutosupportMessageGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportMessageGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutosupportMessageGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutosupportMessageGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutosupportMessageGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutosupportModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) AutosupportModify(params *clientsupport.AutosupportModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.AutosupportModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutosupportModify")
	}

	var r0 *clientsupport.AutosupportModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.AutosupportModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.AutosupportModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.AutosupportModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.AutosupportModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.AutosupportModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigurationBackupFileCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupFileCollectionGet(params *clientsupport.ConfigurationBackupFileCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupFileCollectionGet")
	}

	var r0 *clientsupport.ConfigurationBackupFileCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupFileCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupFileCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupFileCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigurationBackupFileCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupFileCreate(params *clientsupport.ConfigurationBackupFileCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileCreateCreated, *clientsupport.ConfigurationBackupFileCreateAccepted, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupFileCreate")
	}

	var r0 *clientsupport.ConfigurationBackupFileCreateCreated
	var r1 *clientsupport.ConfigurationBackupFileCreateAccepted
	var r2 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileCreateCreated, *clientsupport.ConfigurationBackupFileCreateAccepted, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupFileCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupFileCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupFileCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupFileCreateAccepted); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*clientsupport.ConfigurationBackupFileCreateAccepted)
		}
	}

	if rf, ok := ret.Get(2).(func(*clientsupport.ConfigurationBackupFileCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r2 = rf(params, authInfo, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConfigurationBackupFileDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupFileDelete(params *clientsupport.ConfigurationBackupFileDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupFileDelete")
	}

	var r0 *clientsupport.ConfigurationBackupFileDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupFileDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupFileDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupFileDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigurationBackupFileGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupFileGet(params *clientsupport.ConfigurationBackupFileGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupFileGet")
	}

	var r0 *clientsupport.ConfigurationBackupFileGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupFileGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupFileGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupFileGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupFileGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupFileGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigurationBackupGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupGet(params *clientsupport.ConfigurationBackupGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupGet")
	}

	var r0 *clientsupport.ConfigurationBackupGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigurationBackupModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) ConfigurationBackupModify(params *clientsupport.ConfigurationBackupModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurationBackupModify")
	}

	var r0 *clientsupport.ConfigurationBackupModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.ConfigurationBackupModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.ConfigurationBackupModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.ConfigurationBackupModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.ConfigurationBackupModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.ConfigurationBackupModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoredumpCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CoredumpCollectionGet(params *clientsupport.CoredumpCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.CoredumpCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CoredumpCollectionGet")
	}

	var r0 *clientsupport.CoredumpCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.CoredumpCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.CoredumpCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.CoredumpCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.CoredumpCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoredumpDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CoredumpDelete(params *clientsupport.CoredumpDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.CoredumpDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CoredumpDelete")
	}

	var r0 *clientsupport.CoredumpDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.CoredumpDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.CoredumpDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.CoredumpDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.CoredumpDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoredumpGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) CoredumpGet(params *clientsupport.CoredumpGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.CoredumpGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CoredumpGet")
	}

	var r0 *clientsupport.CoredumpGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.CoredumpGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.CoredumpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.CoredumpGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.CoredumpGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.CoredumpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsApplicationLogsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsApplicationLogsCreate(params *clientsupport.EmsApplicationLogsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsApplicationLogsCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsApplicationLogsCreate")
	}

	var r0 *clientsupport.EmsApplicationLogsCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsApplicationLogsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsApplicationLogsCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsApplicationLogsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsApplicationLogsCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsApplicationLogsCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsApplicationLogsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsConfigGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsConfigGet(params *clientsupport.EmsConfigGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsConfigGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsConfigGet")
	}

	var r0 *clientsupport.EmsConfigGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsConfigGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsConfigGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsConfigGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsConfigModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsConfigModify(params *clientsupport.EmsConfigModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsConfigModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsConfigModify")
	}

	var r0 *clientsupport.EmsConfigModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsConfigModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsConfigModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsConfigModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsDestinationCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsDestinationCollectionGet(params *clientsupport.EmsDestinationCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsDestinationCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsDestinationCollectionGet")
	}

	var r0 *clientsupport.EmsDestinationCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsDestinationCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsDestinationCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsDestinationCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsDestinationCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsDestinationCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsDestinationCreate(params *clientsupport.EmsDestinationCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsDestinationCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsDestinationCreate")
	}

	var r0 *clientsupport.EmsDestinationCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsDestinationCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsDestinationCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsDestinationCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsDestinationCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsDestinationDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsDestinationDelete(params *clientsupport.EmsDestinationDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsDestinationDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsDestinationDelete")
	}

	var r0 *clientsupport.EmsDestinationDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsDestinationDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsDestinationDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsDestinationDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsDestinationDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsDestinationGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsDestinationGet(params *clientsupport.EmsDestinationGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsDestinationGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsDestinationGet")
	}

	var r0 *clientsupport.EmsDestinationGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsDestinationGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsDestinationGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsDestinationGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsDestinationGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsDestinationModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsDestinationModify(params *clientsupport.EmsDestinationModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsDestinationModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsDestinationModify")
	}

	var r0 *clientsupport.EmsDestinationModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsDestinationModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsDestinationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsDestinationModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsDestinationModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsDestinationModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsEventCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsEventCollectionGet(params *clientsupport.EmsEventCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsEventCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsEventCollectionGet")
	}

	var r0 *clientsupport.EmsEventCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsEventCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsEventCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsEventCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsEventCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsEventCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsEventCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterCollectionGet(params *clientsupport.EmsFilterCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterCollectionGet")
	}

	var r0 *clientsupport.EmsFilterCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterCreate(params *clientsupport.EmsFilterCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterCreate")
	}

	var r0 *clientsupport.EmsFilterCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterDelete(params *clientsupport.EmsFilterDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterDelete")
	}

	var r0 *clientsupport.EmsFilterDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterGet(params *clientsupport.EmsFilterGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterGet")
	}

	var r0 *clientsupport.EmsFilterGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterModify(params *clientsupport.EmsFilterModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterModify")
	}

	var r0 *clientsupport.EmsFilterModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterRuleCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterRuleCollectionGet(params *clientsupport.EmsFilterRuleCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterRuleCollectionGet")
	}

	var r0 *clientsupport.EmsFilterRuleCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterRuleCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterRuleCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterRuleCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterRuleDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterRuleDelete(params *clientsupport.EmsFilterRuleDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterRuleDelete")
	}

	var r0 *clientsupport.EmsFilterRuleDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterRuleDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterRuleDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterRuleDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterRuleGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterRuleGet(params *clientsupport.EmsFilterRuleGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterRuleGet")
	}

	var r0 *clientsupport.EmsFilterRuleGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterRuleGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterRuleGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterRuleGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFilterRuleModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFilterRuleModify(params *clientsupport.EmsFilterRuleModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFilterRuleModify")
	}

	var r0 *clientsupport.EmsFilterRuleModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFilterRuleModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFilterRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFilterRuleModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFilterRuleModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFilterRuleModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsFiltersRulesCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsFiltersRulesCreate(params *clientsupport.EmsFiltersRulesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsFiltersRulesCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsFiltersRulesCreate")
	}

	var r0 *clientsupport.EmsFiltersRulesCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFiltersRulesCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsFiltersRulesCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsFiltersRulesCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsFiltersRulesCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsFiltersRulesCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsFiltersRulesCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsMessageCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsMessageCollectionGet(params *clientsupport.EmsMessageCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsMessageCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsMessageCollectionGet")
	}

	var r0 *clientsupport.EmsMessageCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsMessageCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsMessageCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsMessageCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsMessageCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsRoleConfigCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsRoleConfigCollectionGet(params *clientsupport.EmsRoleConfigCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsRoleConfigCollectionGet")
	}

	var r0 *clientsupport.EmsRoleConfigCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsRoleConfigCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsRoleConfigCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsRoleConfigCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsRoleConfigCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsRoleConfigCreate(params *clientsupport.EmsRoleConfigCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsRoleConfigCreate")
	}

	var r0 *clientsupport.EmsRoleConfigCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsRoleConfigCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsRoleConfigCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsRoleConfigCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsRoleConfigDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsRoleConfigDelete(params *clientsupport.EmsRoleConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsRoleConfigDelete")
	}

	var r0 *clientsupport.EmsRoleConfigDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsRoleConfigDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsRoleConfigDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsRoleConfigDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsRoleConfigGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsRoleConfigGet(params *clientsupport.EmsRoleConfigGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsRoleConfigGet")
	}

	var r0 *clientsupport.EmsRoleConfigGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsRoleConfigGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsRoleConfigGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsRoleConfigGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmsRoleConfigModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) EmsRoleConfigModify(params *clientsupport.EmsRoleConfigModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EmsRoleConfigModify")
	}

	var r0 *clientsupport.EmsRoleConfigModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.EmsRoleConfigModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.EmsRoleConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.EmsRoleConfigModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.EmsRoleConfigModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.EmsRoleConfigModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// SnmpGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpGet(params *clientsupport.SnmpGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpGet")
	}

	var r0 *clientsupport.SnmpGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpModify(params *clientsupport.SnmpModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpModify")
	}

	var r0 *clientsupport.SnmpModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpTraphostsCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpTraphostsCollectionGet(params *clientsupport.SnmpTraphostsCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpTraphostsCollectionGet")
	}

	var r0 *clientsupport.SnmpTraphostsCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpTraphostsCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpTraphostsCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpTraphostsCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpTraphostsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpTraphostsCreate(params *clientsupport.SnmpTraphostsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpTraphostsCreate")
	}

	var r0 *clientsupport.SnmpTraphostsCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpTraphostsCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpTraphostsCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpTraphostsCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpTraphostsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpTraphostsDelete(params *clientsupport.SnmpTraphostsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpTraphostsDelete")
	}

	var r0 *clientsupport.SnmpTraphostsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpTraphostsDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpTraphostsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpTraphostsDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpTraphostsGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpTraphostsGet(params *clientsupport.SnmpTraphostsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpTraphostsGet")
	}

	var r0 *clientsupport.SnmpTraphostsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpTraphostsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpTraphostsGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpTraphostsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpTraphostsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpTraphostsGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpUsersCollectionGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpUsersCollectionGet(params *clientsupport.SnmpUsersCollectionGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpUsersCollectionGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpUsersCollectionGet")
	}

	var r0 *clientsupport.SnmpUsersCollectionGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpUsersCollectionGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpUsersCollectionGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpUsersCollectionGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpUsersCollectionGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpUsersCreate provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpUsersCreate(params *clientsupport.SnmpUsersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpUsersCreateCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpUsersCreate")
	}

	var r0 *clientsupport.SnmpUsersCreateCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpUsersCreateCreated, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpUsersCreateCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpUsersCreateCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpUsersCreateParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpUsersDelete provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpUsersDelete(params *clientsupport.SnmpUsersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpUsersDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpUsersDelete")
	}

	var r0 *clientsupport.SnmpUsersDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpUsersDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpUsersDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpUsersDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpUsersDeleteParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpUsersGet provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpUsersGet(params *clientsupport.SnmpUsersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpUsersGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpUsersGet")
	}

	var r0 *clientsupport.SnmpUsersGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpUsersGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpUsersGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpUsersGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpUsersGetParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnmpUsersModify provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) SnmpUsersModify(params *clientsupport.SnmpUsersModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...clientsupport.ClientOption) (*clientsupport.SnmpUsersModifyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnmpUsersModify")
	}

	var r0 *clientsupport.SnmpUsersModifyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) (*clientsupport.SnmpUsersModifyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*clientsupport.SnmpUsersModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) *clientsupport.SnmpUsersModifyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientsupport.SnmpUsersModifyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientsupport.SnmpUsersModifyParams, runtime.ClientAuthInfoWriter, ...clientsupport.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientService creates a new instance of ClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientService {
	mock := &ClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
